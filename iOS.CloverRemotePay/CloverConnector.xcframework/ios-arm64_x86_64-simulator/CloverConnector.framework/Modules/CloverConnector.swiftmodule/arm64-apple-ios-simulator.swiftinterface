// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CloverConnector
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CloverConnector
import Foundation
import ObjectMapper
import Starscream
import Swift
import SwiftyJSON
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Account {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels7Account7Account) public class Account : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var email: Swift.String?
      public var primaryMerchant: CloverConnector.CLVModels.Merchant.Merchant?
      public var primaryDeveloper: CloverConnector.CLVModels.Developer.Developer?
      public var primaryReseller: CloverConnector.CLVModels.Base.Reference?
      public var isActive: Swift.Bool?
      public var createdTime: Foundation.Date?
      public var claimedTime: Foundation.Date?
      public var lastLogin: Swift.Int?
      public var inviteSent: Swift.Bool?
      public var status: Swift.String?
      public var role: CloverConnector.CLVModels.Employees.Role?
      public var merchants: [CloverConnector.CLVModels.Merchant.Merchant]?
      public var developers: [CloverConnector.CLVModels.Developer.Developer]?
      public var resellers: [CloverConnector.CLVModels.Base.Reference]?
      public var csrfToken: Swift.String?
      public var authFactors: [CloverConnector.CLVModels.Account.AuthFactor]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels7Account10AuthFactor) public class AuthFactor : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var type_: CloverConnector.CLVModels.Account.AuthFactorType?
      public var phoneNumber: Swift.String?
      public var backupCodes: Swift.String?
      public var totpKey: Swift.String?
      public var createdTime: Foundation.Date?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum AuthFactorType : Swift.String {
      case SMS
      case TOTP
      case BACKUP_CODES
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
@objc public class AcknowledgementMessage : CloverConnector.Message {
  public var sourceMessageId: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ActivityMessageFromActivity : CloverConnector.BaseActivityRemoteMessage {
  public init(action a: Swift.String, payload p: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class BaseActivityRemoteMessage : CloverConnector.Message {
  public var action: Swift.String
  public var payload: Swift.String?
  public init(action a: Swift.String, payload p: Swift.String?, method m: CloverConnector.Method)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ActivityMessageToActivity : CloverConnector.BaseActivityRemoteMessage {
  public init(action a: Swift.String, payload p: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ActivityRequest : CloverConnector.Message {
  public var action: Swift.String
  public var payload: Swift.String?
  public var nonBlocking: Swift.Bool
  public var forceLaunch: Swift.Bool
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ActivityResponseMessage : CloverConnector.Message {
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class AddDiscountAction : ObjectMapper.Mappable {
  public var discount: CloverConnector.DisplayDiscount?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class AddLineItemAction : ObjectMapper.Mappable {
  public var lineItem: CloverConnector.DisplayLineItem?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Apps {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps17AndroidPermission) public class AndroidPermission : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var permission: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps14AndroidVersion) public class AndroidVersion : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var createdAt: Swift.Int?
      public var version_: Swift.Int?
      public var versionName: Swift.String?
      public var approved: Swift.Bool?
      public var hash_: Swift.String?
      public var deviceInstallCount: Swift.Int?
      public var hashOriginal: Swift.String?
      public var approvalStatus: CloverConnector.CLVModels.Base.ApprovalStatus?
      public var scanStatus: CloverConnector.CLVModels.Apps.ScanStatus?
      public var scanId: Swift.String?
      public var minSdkVersion: Swift.Int?
      public var digestAlg: Swift.String?
      public var apkUrl: Swift.String?
      public var permissions: [Swift.String]?
      public var app: CloverConnector.CLVModels.Apps.App?
      public var releaseNote: CloverConnector.CLVModels.Base.Reference?
      public var merchantGroups: [CloverConnector.CLVModels.Developer.MerchantGroup]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps3App) public class App : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var published: Swift.Bool?
      public var developer: CloverConnector.CLVModels.Developer.Developer?
      public var merchant: CloverConnector.CLVModels.Merchant.Merchant?
      public var description_: Swift.String?
      public var tagline: Swift.String?
      public var videoUrl: Swift.String?
      public var activationUrl: Swift.String?
      public var siteUrl: Swift.String?
      public var defaultResponseType: CloverConnector.CLVModels.Apps.OAuthResponseType?
      public var appDomain: Swift.String?
      public var androidVersion: CloverConnector.CLVModels.Apps.AndroidVersion?
      public var packageName: Swift.String?
      public var approved: Swift.Bool?
      public var systemApp: Swift.Bool?
      public var hidden: Swift.Bool?
      public var filenameIcon: Swift.String?
      public var filenameIconSmall: Swift.String?
      public var filenameIconLarge: Swift.String?
      public var installCount: Swift.Int?
      public var sortOrder: Swift.Int?
      public var permissionMerchantRead: Swift.Bool?
      public var permissionMerchantWrite: Swift.Bool?
      public var permissionCustomersRead: Swift.Bool?
      public var permissionCustomersWrite: Swift.Bool?
      public var permissionInventoryRead: Swift.Bool?
      public var permissionInventoryWrite: Swift.Bool?
      public var permissionOrdersRead: Swift.Bool?
      public var permissionOrdersWrite: Swift.Bool?
      public var permissionPaymentsRead: Swift.Bool?
      public var permissionPaymentsWrite: Swift.Bool?
      public var permissionEmployeesRead: Swift.Bool?
      public var permissionEmployeesWrite: Swift.Bool?
      public var permissionProcessCards: Swift.Bool?
      public var permissionMidRead: Swift.Bool?
      public var privacyPolicy: Swift.String?
      public var eula: Swift.String?
      public var supportPhone: Swift.String?
      public var supportPhoneHours: Swift.String?
      public var supportEmail: Swift.String?
      public var supportUrl: Swift.String?
      public var productType: CloverConnector.CLVModels.Apps.ProductType?
      public var approvalStatus: CloverConnector.CLVModels.Base.ApprovalStatus?
      public var androidPermissions: [CloverConnector.CLVModels.Apps.AndroidPermission]?
      public var screenshots: [CloverConnector.CLVModels.Apps.Screenshot]?
      public var availableSubscriptions: [CloverConnector.CLVModels.Apps.AppSubscription]?
      public var subscriptions: [CloverConnector.CLVModels.Apps.AppSubscription]?
      public var availableMetereds: [CloverConnector.CLVModels.Apps.AppMetered]?
      public var metereds: [CloverConnector.CLVModels.Apps.AppMetered]?
      public var usbDevices: [CloverConnector.CLVModels.Apps.AppUsbDevice]?
      public var currentSubscription: CloverConnector.CLVModels.Apps.AppSubscription?
      public var webhook: CloverConnector.CLVModels.Apps.WebHook?
      public var androidVersions: [CloverConnector.CLVModels.Apps.AndroidVersion]?
      public var installed: Swift.Bool?
      public var installedTime: Foundation.Date?
      public var paidAppHasTrial: Swift.Bool?
      public var approvalStatusModifiedTime: Foundation.Date?
      public var smartReceiptText: Swift.String?
      public var smartReceiptUrl: Swift.String?
      public var billingStartTime: Foundation.Date?
      public var appSecret: Swift.String?
      public var businessTypes: [CloverConnector.CLVModels.Apps.BusinessType]?
      public var deviceTypes: [CloverConnector.CLVModels.Apps.DeviceType]?
      public var modules: [CloverConnector.CLVModels.Merchant.Module]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps14AppBillingInfo) public class AppBillingInfo : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var appSubscription: CloverConnector.CLVModels.Apps.AppSubscription?
      public var isInTrial: Swift.Bool?
      public var billingStartTime: Foundation.Date?
      public var status: CloverConnector.CLVModels.Apps.MerchantBillingStatus?
      public var daysLapsed: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps9AppBundle) public class AppBundle : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var includedApps: [CloverConnector.CLVModels.Apps.App]?
      public var bundleCountries: [CloverConnector.CLVModels.Apps.AppBundleCountry]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps16AppBundleCountry) public class AppBundleCountry : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var price: Swift.Int?
      public var pricePerDevice: Swift.Int?
      public var country: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps11AppCarousel) public class AppCarousel : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var countryCode: Swift.String?
      public var reseller: CloverConnector.CLVModels.Base.Reference?
      public var maxSize: Swift.Int?
      public var carouselApps: [CloverConnector.CLVModels.Apps.App]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps10AppMetered) public class AppMetered : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var meteredCountries: [CloverConnector.CLVModels.Apps.AppMeteredCountry]?
      public var app: CloverConnector.CLVModels.Apps.App?
      public var label: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps17AppMeteredCountry) public class AppMeteredCountry : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var action: Swift.String?
      public var amount: Swift.Int?
      public var country: Swift.String?
      public var active: Swift.Bool?
      public var appMetered: CloverConnector.CLVModels.Apps.AppMetered?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps15AppNotification) public class AppNotification : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var app: CloverConnector.CLVModels.Apps.App?
      public var event: Swift.String?
      public var timeToLive: Swift.Int?
      public var data: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps15AppSubscription) public class AppSubscription : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var subscriptionCountries: [CloverConnector.CLVModels.Apps.AppSubscriptionCountry]?
      public var app: CloverConnector.CLVModels.Apps.App?
      public var label: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps22AppSubscriptionCountry) public class AppSubscriptionCountry : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var amount: Swift.Int?
      public var country: Swift.String?
      public var description_: Swift.String?
      public var active: Swift.Bool?
      public var appSubscription: CloverConnector.CLVModels.Apps.AppSubscription?
      public var installCount: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps11AppTracking) public class AppTracking : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var developerAppId: Swift.String?
      public var applicationName: Swift.String?
      public var applicationID: Swift.String?
      public var applicationVersion: Swift.String?
      public var sourceSDK: Swift.String?
      public var sourceSDKVersion: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps12AppUsbDevice) public class AppUsbDevice : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var packageName: Swift.String?
      public var vendorId: Swift.Int?
      public var productId: Swift.Int?
      public var app: CloverConnector.CLVModels.Apps.App?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps12BusinessType) public class BusinessType : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var businessTypeGroupCode: CloverConnector.CLVModels.Apps.BusinessTypeGroupCode?
      public var businessTypeGroupName: Swift.String?
      public var code: CloverConnector.CLVModels.Base.BusinessTypeCode?
      public var name: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum BusinessTypeGroupCode : Swift.String {
      case FOOD
      case RETAIL
      case SERVICES
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps10DeviceType) public class DeviceType : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var name: Swift.String?
      public var displayName: Swift.String?
      public var models: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum MerchantBillingStatus : Swift.String {
      case ACTIVE
      case LAPSED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum OAuthResponseType : Swift.String {
      case TOKEN
      case CODE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum ProductType : Swift.String {
      case ANDROID
      case WEB
      case BOTH
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps11ReleaseNote) public class ReleaseNote : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var note: Swift.String?
      public var createdTime: Foundation.Date?
      public var modifiedTime: Foundation.Date?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum ScanStatus : Swift.String {
      case NOT_SCANNED
      case IN_PROGRESS
      case PASSED
      case FAILED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps10Screenshot) public class Screenshot : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var name: Swift.String?
      public var small: Swift.String?
      public var medium: Swift.String?
      public var large: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Apps7WebHook) public class WebHook : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var url: Swift.String?
      public var secret: Swift.String?
      public var valid: Swift.Bool?
      public var verification: Swift.String?
      public var orders: Swift.Bool?
      public var app: Swift.Bool?
      public var payments: Swift.Bool?
      public var inventory: Swift.Bool?
      public var customers: Swift.Bool?
      public var merchants: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers public class AuthRequest : CloverConnector.TransactionRequest {
  public var allowOfflinePayment: Swift.Bool?
  public var approveOfflinePaymentWithoutPrompt: Swift.Bool?
  public var disableCashback: Swift.Bool?
  public var taxAmount: Swift.Int?
  public var tippableAmount: Swift.Int?
  public var forceOfflinePayment: Swift.Bool?
  override public var type: CloverConnector.TransactionType {
    get
    set
  }
  required override public init(amount: Swift.Int, externalId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class AuthResponse : CloverConnector.PaymentResponse {
  public init(success: Swift.Bool, result: CloverConnector.ResultCode)
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Base {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Base7Address) public class Address : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var address1: Swift.String?
      public var address2: Swift.String?
      public var address3: Swift.String?
      public var city: Swift.String?
      public var country: Swift.String?
      public var phoneNumber: Swift.String?
      public var state: Swift.String?
      public var zip: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum ApprovalStatus : Swift.String {
      case NEW
      case PENDING
      case APPROVED_PENDING_SIGNING
      case APPROVED
      case DENIED
      case PUBLISHED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum BusinessTypeCode : Swift.String {
      case FULL_SERVICE_RESTAURANT
      case QUICK_SERVICE_RESTAURANT
      case COFFEE_SHOP
      case BAKERY
      case BAR
      case FOOD_TRUCK
      case FROZEN_YOGURT
      case PIZZA
      case DELI
      case OTHER_RESTAURANT
      case BOUTIQUE
      case CONVENIENCE_STORE
      case GROCERY
      case LIQUOR_STORE
      case VAPE_SHOP
      case JEWELRY
      case FLORIST
      case OTHER_RETAIL
      case FITNESS
      case SPA
      case HAIR_SALON
      case HOME_AND_REPAIR
      case PROFESSIONAL_SERVICES
      case CATERING
      case OTHER_SERVICE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Base11CountryInfo) public class CountryInfo : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var countryCode: Swift.String?
      public var displayName: Swift.String?
      public var localDisplayName: Swift.String?
      public var defaultCurrency: Swift.String?
      public var defaultTimezone: Swift.String?
      public var stateProvinceRequired: Swift.Bool?
      public var zipPostalRequired: Swift.Bool?
      public var countyRequired: Swift.Bool?
      public var defaultLocale: Swift.String?
      public var appMarketBillingEnabled: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Base9Reference) public class Reference : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Base13ServiceCharge) public class ServiceCharge : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderRef: CloverConnector.CLVModels.Order.Order?
      public var name: Swift.String?
      public var enabled: Swift.Bool?
      public var percentageDecimal: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Base6Tender) public class Tender : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var editable: Swift.Bool?
      public var labelKey: Swift.String?
      public var label: Swift.String?
      public var opensCashDrawer: Swift.Bool?
      public var supportsTipping: Swift.Bool?
      public var enabled: Swift.Bool?
      public var visible: Swift.Bool?
      public var instructions: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
@objc public class BaseActivityMessage : ObjectiveC.NSObject {
  public init(action a: Swift.String, payload p: Swift.String? = nil)
  public var action: Swift.String
  public var payload: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BaseResponse : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var success: Swift.Bool
  public var result: CloverConnector.ResultCode
  public var reason: Swift.String?
  public var message: Swift.String?
  @objc override dynamic public init()
  public init(success: Swift.Bool, result: CloverConnector.ResultCode)
  public init(success: Swift.Bool, result: CloverConnector.ResultCode, reason: Swift.String?, message: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class BaseTransactionRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var amount: Swift.Int
  public var autoAcceptPaymentConfirmations: Swift.Bool?
  public var cardEntryMethods: Swift.Int
  public var cardNotPresent: Swift.Bool?
  public var disableDuplicateChecking: Swift.Bool?
  public var disablePrinting: Swift.Bool?
  public var disableReceiptSelection: Swift.Bool?
  public var disableRestartTransactionOnFail: Swift.Bool?
  public var externalId: Swift.String
  public var extras: [Swift.String : Swift.String]?
  public var regionalExtras: [Swift.String : Swift.String]?
  public var vaultedCard: CloverConnector.CLVModels.Payments.VaultedCard?
  public var type: CloverConnector.TransactionType {
    get
    set
  }
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public init(amount: Swift.Int, externalId: Swift.String)
  @objc deinit
}
@objc public class BreakMessage : CloverConnector.Message {
  required public init()
  required public init(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CapturePreAuthRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var version: Swift.Int
  public var amount: Swift.Int
  public var tipAmount: Swift.Int?
  public var paymentId: Swift.String
  public var externalId: Swift.String?
  public var tippableAmount: Swift.Int?
  public var tipMode: CloverConnector.CLVModels.Payments.TipMode?
  public var autoAcceptsSignature: Swift.Bool?
  public var disablePrinting: Swift.Bool?
  public var signatureEntryLocation: CloverConnector.CLVModels.Payments.DataEntryLocation?
  public var disableReceiptSelection: Swift.Bool?
  public var signatureThreshold: Swift.Int?
  required public init(amount: Swift.Int, paymentId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CapturePreAuthRequestMessageV1 : CloverConnector.Message {
  public var paymentId: Swift.String?
  public var amount: Swift.Int?
  public var tipAmount: Swift.Int?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CapturePreAuthResponse : CloverConnector.BaseResponse {
  public var paymentId: Swift.String? {
    get
  }
  public var amount: Swift.Int? {
    get
  }
  public var tipAmount: Swift.Int? {
    get
  }
  public init(success: Swift.Bool, result: CloverConnector.ResultCode, paymentId: Swift.String?, amount: Swift.Int?, tipAmount: Swift.Int?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CapturePreAuthResponseMessage : CloverConnector.Message {
  public var status: CloverConnector.ResultStatus?
  public var reason: Swift.String?
  public var paymentId: Swift.String?
  public var amount: Swift.Int?
  public var tipAmount: Swift.Int?
  public var message: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CardData : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
  public var track1: Swift.String?
  public var track2: Swift.String?
  public var track3: Swift.String?
  public var encrypted: Swift.Bool?
  public var maskedTrack1: Swift.String?
  public var maskedTrack2: Swift.String?
  public var maskedTrack3: Swift.String?
  public var pan: Swift.String?
  public var cardholderName: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var exp: Swift.String?
  public var last4: Swift.String?
  public var first6: Swift.String?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CardDataRequestMessage : CloverConnector.Message {
  public var payIntent: CloverConnector.PayIntent?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CardDataResponseMessage : CloverConnector.Message {
  public var cardData: CloverConnector.CardData?
  public var status: CloverConnector.ResultStatus?
  public var reason: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Cash {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels4Cash9CashEvent) public class CashEvent : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var type_: CloverConnector.CLVModels.Cash.Type_?
      public var amountChange: Swift.Int?
      public var timestamp: Swift.Int?
      public var note: Swift.String?
      public var employee: CloverConnector.CLVModels.Employees.Employee?
      public var device: CloverConnector.CLVModels.Device.Device?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum Type_ : Swift.String {
      case LOAD
      case TRANSACTION
      case OPEN
      case ADJUSTMENT
      case COUNT
      case UNLOAD
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
@objc public class CashbackSelectedMessage : CloverConnector.Message {
  public var cashbackAmount: Swift.Int?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CCLog {
  public static var timestampEnabled: Swift.Bool
  public static var verbosePrinting: Swift.Bool
  public static var maxPrintingLength: Swift.Int
  public static var dateFormatter: Foundation.DateFormatter
  public static func d(_ format: Swift.String, args: any Swift.CVarArg..., line: Swift.Int = #line, file: Swift.String = #file)
  public static func t(_ format: Swift.String, args: any Swift.CVarArg..., line: Swift.Int = #line, file: Swift.String = #file)
  public static func w(_ format: Swift.String, args: any Swift.CVarArg..., line: Swift.Int = #line, file: Swift.String = #file)
  public static func s(_ format: Swift.String, args: any Swift.CVarArg..., line: Swift.Int = #line, file: Swift.String = #file)
  public static var dPrint: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> ()
  public static var tPrint: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> ()
  public static var wPrint: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> ()
  public static var sPrint: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> ()
  public static var dFormatter: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> (Swift.String)
  public static var tFormatter: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> (Swift.String)
  public static var wFormatter: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> (Swift.String)
  public static var sFormatter: (_ format: Swift.String, _ args: [any Swift.CVarArg], _ line: Swift.Int, _ file: Swift.String) -> (Swift.String)
  public static var dispatchQueue: Dispatch.DispatchQueue
  public static func defaultLogPrint(_ string: Swift.String, respawn: Swift.Bool = true)
  public static func addLogHandler(handler: @escaping (_ string: Swift.String) -> ()) -> Swift.Int
  public static func removeLogHandler(handlerIndex: Swift.Int)
  @objc deinit
}
public class Challenge : ObjectMapper.Mappable {
  public var message: Swift.String?
  public var reason: CloverConnector.VoidReason?
  public var type: CloverConnector.ChallengeType?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum ChallengeType : Swift.String {
  case DUPLICATE_CHALLENGE
  case OFFLINE_CHALLENGE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class CloseoutRequest : ObjectiveC.NSObject {
  public init(allowOpenTabs: Swift.Bool, batchId: Swift.String?)
  @objc deinit
}
@objc public class CloseoutRequestMessage : CloverConnector.Message {
  public var allowOpenTabs: Swift.Bool?
  public var batchId: Swift.String?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CloseoutResponse : CloverConnector.BaseResponse {
  public var batch: CloverConnector.CLVModels.Payments.Batch?
  public init(batch: CloverConnector.CLVModels.Payments.Batch?, success: Swift.Bool, result: CloverConnector.ResultCode)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CloseoutResponseMessage : CloverConnector.Message {
  public var status: CloverConnector.ResultStatus?
  public var reason: Swift.String?
  public var batch: CloverConnector.CLVModels.Payments.Batch?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CloverConnectorBroadcaster {
  public func addObject(_ listener: any CloverConnector.ICloverConnectorListener)
  public func clearAll()
  public func removeObject(_ listener: any CloverConnector.ICloverConnectorListener)
  public func notifyOnTipAdded(_ tip: Swift.Int)
  public func notifyOnPaymentRefundResponse(_ refundPaymentResponse: CloverConnector.RefundPaymentResponse)
  public func notifyOnPaymentRefundVoidResponse(_ voidPaymentRefundResponse: CloverConnector.VoidPaymentRefundResponse)
  public func notifyOnCloseoutResponse(_ closeoutResponse: CloverConnector.CloseoutResponse)
  public func notifyOnDeviceActivityStart(_ deviceEvent: CloverConnector.CloverDeviceEvent)
  public func notifyOnDeviceActivityEnd(_ deviceEvent: CloverConnector.CloverDeviceEvent)
  public func notifyOnDeviceError(_ deviceError: CloverConnector.CloverDeviceErrorEvent)
  public func notifyOnSaleResponse(_ response: CloverConnector.SaleResponse)
  public func notifyOnAuthResponse(_ response: CloverConnector.AuthResponse)
  public func notifyOnManualRefundResponse(_ response: CloverConnector.ManualRefundResponse)
  public func notifyOnVerifySignatureRequest(_ request: CloverConnector.VerifySignatureRequest)
  public func notifyOnConfirmPayment(_ request: CloverConnector.ConfirmPaymentRequest)
  public func notifyOnVoidPaymentResponse(_ response: CloverConnector.VoidPaymentResponse)
  public func notifyOnConnect()
  public func notifyOnDisconnect()
  public func notifyOnReady(_ merchantInfo: CloverConnector.MerchantInfo)
  public func notifyOnTipAdjustAuthResponse(_ response: CloverConnector.TipAdjustAuthResponse)
  public func notifyOnVaultCardRespose(_ ccr: CloverConnector.VaultCardResponse)
  public func notifyOnPreAuthResponse(_ response: CloverConnector.PreAuthResponse)
  public func notifyOnCapturePreAuth(_ response: CloverConnector.CapturePreAuthResponse)
  public func notifyOnIncrementPreAuth(_ response: CloverConnector.IncrementPreauthResponse)
  public func notifyOnPendingPaymentsResponse(_ response: CloverConnector.RetrievePendingPaymentsResponse)
  public func notifyPrintCredit(_ response: CloverConnector.PrintManualRefundReceiptMessage)
  public func notifyPrintCreditDecline(_ response: CloverConnector.PrintManualRefundDeclineReceiptMessage)
  public func notifyOnPrintMerchantReceipt(_ response: CloverConnector.PrintPaymentMerchantCopyReceiptMessage)
  public func notifyOnPrintPaymentReceipt(_ response: CloverConnector.PrintPaymentReceiptMessage)
  public func notifyOnPrintPaymentDeclineReceipt(_ response: CloverConnector.PrintPaymentDeclineReceiptMessage)
  public func notifyOnPrintPaymentRefund(_ response: CloverConnector.PrintRefundPaymentReceiptMessage)
  public func notifyOnReadCardResponse(_ response: CloverConnector.ReadCardDataResponse)
  public func notifyOnCustomActivityResponse(_ response: CloverConnector.CustomActivityResponse)
  public func notifyOnMessageFromActivity(_ message: CloverConnector.MessageFromActivity)
  public func notifyOnResetDeviceResponse(_ response: CloverConnector.ResetDeviceResponse)
  public func notifyOnCustomerProvidedDataEvent(_ event: CloverConnector.CustomerProvidedDataEvent)
  public func notifyOnRetrievePrintersResponse(_ response: CloverConnector.RetrievePrintersResponse)
  public func notifyOnPrintJobStatusResponse(_ response: CloverConnector.PrintJobStatusResponse)
  public func notifyOnRetrievePayment(_ response: CloverConnector.RetrievePaymentResponse)
  public func notifyOnDeviceStatusResponse(_ response: CloverConnector.RetrieveDeviceStatusResponse)
  public func notifyOnInvalidStateTransitionResponse(_ response: CloverConnector.InvalidStateTransitionResponse)
  public func notifyOnDisplayReceiptOptionsResponse(_ response: CloverConnector.DisplayReceiptOptionsResponse)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CloverConnectorFactory {
  public static func createICloverConnector(config: any CloverConnector.CloverDeviceConfiguration) -> any CloverConnector.ICloverConnector
  @objc deinit
}
public typealias ImageClass = UIKit.UIImage
public protocol CloverDeviceConfiguration {
  var remoteApplicationID: Swift.String { get set }
  var remoteSourceSDK: Swift.String { get }
  func getTransport() -> CloverConnector.CloverTransport?
  func getCloverDeviceTypeName() -> Swift.String
  func getMessagePackageName() -> Swift.String
  func getName() -> Swift.String
  func getMaxMessageCharacters() -> Swift.Int
}
@objc public class CloverDeviceErrorEvent : ObjectiveC.NSObject {
  public var errorType: CloverConnector.CloverDeviceErrorType {
    get
  }
  public var code: Swift.Int? {
    get
  }
  public var cause: (any Swift.Error)? {
    get
  }
  public var message: Swift.String {
    get
  }
  public init(errorType: CloverConnector.CloverDeviceErrorType, code: Swift.Int?, cause: (any Swift.Error)?, message: Swift.String)
  @objc deinit
}
public enum CloverDeviceErrorType : Swift.String {
  case COMMUNICATION_ERROR
  case VALIDATION_ERROR
  case EXCEPTION
  case CONNECTION_ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CloverDeviceEvent : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public enum DeviceEventState : Swift.String {
    case START
    case FAILED
    case FATAL
    case TRY_AGAIN
    case INPUT_ERROR
    case PIN_BYPASS_CONFIRM
    case CANCELED
    case TIMED_OUT
    case DECLINED
    case VOIDED
    case CONFIGURING
    case PROCESSING
    case REMOVE_CARD
    case PROCESSING_GO_ONLINE
    case PROCESSING_CREDIT
    case PROCESSING_SWIPE
    case SELECT_APPLICATION
    case PIN_PAD
    case MANUAL_CARD_NUMBER
    case MANUAL_CARD_CVV
    case MANUAL_CARD_CVV_UNREADABLE
    case MANUAL_CARD_EXPIRATION
    case SELECT_ACCOUNT
    case CASHBACK_CONFIRM
    case CASHBACK_SELECT
    case CONTACTLESS_TAP_REQUIRED
    case VOICE_REFERRAL_RESULT
    case CONFIRM_PARTIAL_AUTH
    case PACKET_EXCEPTION
    case CONFIRM_DUPLICATE_CHECK
    case VERIFY_SIGNATURE_ON_PAPER
    case VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID
    case VERIFY_SIGNATURE_ON_SCREEN
    case VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID
    case ADD_SIGNATURE
    case SIGNATURE_ON_SCREEN_FALLBACK
    case RETURN_TO_MERCHANT
    case SIGNATURE_REJECT
    case ADD_SIGNATURE_CANCEL_CONFIRM
    case CONFIRM_AMOUNT
    case SENSORY_EXPERIENCE
    case ADD_TIP
    case RECEIPT_OPTIONS
    case HANDLE_TENDER
    case STARTING_CUSTOM_ACTIVITY
    case CUSTOM_ACTIVITY
    case SELECT_WITHDRAW_FROM_ACCOUNT
    case VERIFY_SURCHARGES
    case VOID_CONFIRM
    case UNKNOWN
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var eventState: CloverConnector.CloverDeviceEvent.DeviceEventState?
  public var code: Swift.Int?
  public var message: Swift.String?
  public var inputOptions: [CloverConnector.InputOption]?
  @objc override required dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public init(eventState: CloverConnector.CloverDeviceEvent.DeviceEventState?, message: Swift.String?, inputOptions: [CloverConnector.InputOption]? = nil)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CloverDeviceLogMessage : CloverConnector.Message {
  public var message: Swift.String?
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultCloverDeviceObserver {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloverTransport : ObjectiveC.NSObject {
  public func initialize()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CLVModels {
  @objc deinit
}
@objc public class ConfirmPaymentMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var challenges: [CloverConnector.Challenge]?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConfirmPaymentRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var challenges: [CloverConnector.Challenge]?
  @objc override dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CreditPrintMessage : CloverConnector.Message {
  public var credit: CloverConnector.CLVModels.Payments.Credit?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CustomActivityRequest : CloverConnector.BaseActivityMessage, ObjectMapper.Mappable {
  public var nonBlocking: Swift.Bool?
  public init(_ action: Swift.String, payload p: Swift.String?, nonBlocking nb: Swift.Bool = false)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CustomActivityResponse : CloverConnector.BaseResponse {
  public var action: Swift.String?
  public var payload: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class CustomerInfoMessage : CloverConnector.Message {
  public var customer: CloverConnector.CLVModels.Customers.CustomerInfo?
  public init(customer: CloverConnector.CLVModels.Customers.CustomerInfo?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CustomerProvidedDataEvent : CloverConnector.BaseResponse {
  public var eventId: Swift.String?
  public var config: CloverConnector.DataProviderConfig?
  public var data: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CustomerProvidedDataMessage : CloverConnector.Message {
  public var result: CloverConnector.ResultStatus
  public var eventId: Swift.String?
  public var config: CloverConnector.CLVModels.Loyalty.LoyaltyDataConfig?
  public var data: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Customers {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Customers7Address) public class Address : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var address1: Swift.String?
      public var address2: Swift.String?
      public var address3: Swift.String?
      public var city: Swift.String?
      public var country: Swift.String?
      public var state: Swift.String?
      public var zip: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Customers4Card) public class Card : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var first6: Swift.String?
      public var last4: Swift.String?
      public var firstName: Swift.String?
      public var lastName: Swift.String?
      public var expirationDate: Swift.String?
      public var cardType: Swift.String?
      public var token: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Customers8Customer) public class Customer : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderRef: CloverConnector.CLVModels.Order.Order?
      public var firstName: Swift.String?
      public var lastName: Swift.String?
      public var marketingAllowed: Swift.Bool?
      public var customerSince: Swift.Int?
      public var orders: [CloverConnector.CLVModels.Order.Order]?
      public var addresses: [CloverConnector.CLVModels.Customers.Address]?
      public var emailAddresses: [CloverConnector.CLVModels.Customers.EmailAddress]?
      public var phoneNumbers: [CloverConnector.CLVModels.Customers.PhoneNumber]?
      public var cards: [CloverConnector.CLVModels.Customers.Card]?
      public init(id: Swift.String? = nil, orderRef: CloverConnector.CLVModels.Order.Order? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, marketingAllowed: Swift.Bool? = nil, customerSince: Swift.Int? = nil, orders: [CloverConnector.CLVModels.Order.Order]? = nil, addresses: [CloverConnector.CLVModels.Customers.Address]? = nil, emailAddresses: [CloverConnector.CLVModels.Customers.EmailAddress]? = nil, phoneNumbers: [CloverConnector.CLVModels.Customers.PhoneNumber]? = nil, cards: [CloverConnector.CLVModels.Customers.Card]? = nil)
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public class CustomerInfo : ObjectMapper.Mappable {
      public var customer: CloverConnector.CLVModels.Customers.Customer?
      public var displayString: Swift.String?
      public var externalId: Swift.String?
      public var externalSystemName: Swift.String?
      public var extras: [Swift.String : Swift.String]?
      public init(customer: CloverConnector.CLVModels.Customers.Customer? = nil, displayString: Swift.String? = nil, externalId: Swift.String? = nil, externalSystemName: Swift.String? = nil, extras: [Swift.String : Swift.String]? = nil)
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Customers12EmailAddress) public class EmailAddress : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var emailAddress: Swift.String?
      public var verifiedTime: Foundation.Date?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Customers11PhoneNumber) public class PhoneNumber : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var phoneNumber: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
public class DataProviderConfig : ObjectMapper.Mappable {
  public var type: Swift.String?
  public var configuration: [Swift.String : Swift.String]?
  public init(type: Swift.String?, configuration: [Swift.String : Swift.String]? = nil)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class DeclineCreditPrintMessage : CloverConnector.Message {
  public var credit: CloverConnector.CLVModels.Payments.Credit?
  public var reason: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class DeclinePaymentPrintMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var reason: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc open class DefaultCloverConnectorListener : ObjectiveC.NSObject, CloverConnector.ICloverConnectorListener {
  weak public var cloverConnector: (any CloverConnector.ICloverConnector)?
  public init(cloverConnector: (any CloverConnector.ICloverConnector)?)
  public func onTipAdded(_ message: CloverConnector.TipAddedMessage)
  open func onSaleResponse(_ response: CloverConnector.SaleResponse)
  open func onAuthResponse(_ authResponse: CloverConnector.AuthResponse)
  open func onPreAuthResponse(_ preAuthResponse: CloverConnector.PreAuthResponse)
  open func onCapturePreAuthResponse(_ capturePreAuthResponse: CloverConnector.CapturePreAuthResponse)
  open func onIncrementPreAuthResponse(_ incrementPreAuthResponse: CloverConnector.IncrementPreauthResponse)
  open func onTipAdjustAuthResponse(_ tipAdjustAuthResponse: CloverConnector.TipAdjustAuthResponse)
  open func onVoidPaymentResponse(_ voidPaymentResponse: CloverConnector.VoidPaymentResponse)
  open func onVoidCreditResponse(_ voidCreditResponse: CloverConnector.VoidCreditResponse)
  open func onRefundPaymentResponse(_ refundPaymentResponse: CloverConnector.RefundPaymentResponse)
  open func onVoidPaymentRefundResponse(_ response: CloverConnector.VoidPaymentRefundResponse)
  open func onManualRefundResponse(_ manualRefundResponse: CloverConnector.ManualRefundResponse)
  open func onCloseoutResponse(_ closeoutResponse: CloverConnector.CloseoutResponse)
  open func onVerifySignatureRequest(_ signatureVerifyRequest: CloverConnector.VerifySignatureRequest)
  open func onVaultCardResponse(_ vaultCardResponse: CloverConnector.VaultCardResponse)
  open func onDeviceActivityStart(_ deviceEvent: CloverConnector.CloverDeviceEvent)
  open func onDeviceActivityEnd(_ deviceEvent: CloverConnector.CloverDeviceEvent)
  open func onDeviceError(_ deviceError: CloverConnector.CloverDeviceErrorEvent)
  open func onDeviceConnected()
  open func onDeviceReady(_ merchantInfo: CloverConnector.MerchantInfo)
  open func onDeviceDisconnected()
  open func onPrintManualRefundReceipt(_ pcm: CloverConnector.PrintManualRefundReceiptMessage)
  open func onPrintManualRefundDeclineReceipt(_ pcdrm: CloverConnector.PrintManualRefundDeclineReceiptMessage)
  open func onPrintPaymentReceipt(_ pprm: CloverConnector.PrintPaymentReceiptMessage)
  open func onPrintPaymentDeclineReceipt(_ ppdrm: CloverConnector.PrintPaymentDeclineReceiptMessage)
  open func onPrintPaymentMerchantCopyReceipt(_ ppmcrm: CloverConnector.PrintPaymentMerchantCopyReceiptMessage)
  open func onPrintRefundPaymentReceipt(_ pprrm: CloverConnector.PrintRefundPaymentReceiptMessage)
  open func onRetrievePendingPaymentsResponse(_ retrievePendingPaymentResponse: CloverConnector.RetrievePendingPaymentsResponse)
  open func onReadCardDataResponse(_ readCardDataResponse: CloverConnector.ReadCardDataResponse)
  open func onConfirmPaymentRequest(_ request: CloverConnector.ConfirmPaymentRequest)
  open func onCustomActivityResponse(_ customActivityResponse: CloverConnector.CustomActivityResponse)
  open func onMessageFromActivity(_ response: CloverConnector.MessageFromActivity)
  open func onResetDeviceResponse(_ response: CloverConnector.ResetDeviceResponse)
  open func onCustomerProvidedDataEvent(_ event: CloverConnector.CustomerProvidedDataEvent)
  open func onRetrievePaymentResponse(_ response: CloverConnector.RetrievePaymentResponse)
  open func onRetrievePrintersResponse(_ response: CloverConnector.RetrievePrintersResponse)
  open func onPrintJobStatusResponse(_ printJobStatusResponse: CloverConnector.PrintJobStatusResponse)
  open func onRetrieveDeviceStatusResponse(_ response: CloverConnector.RetrieveDeviceStatusResponse)
  open func onInvalidStateTransitionResponse(_ response: CloverConnector.InvalidStateTransitionResponse)
  open func onDisplayReceiptOptionsResponse(_ response: CloverConnector.DisplayReceiptOptionsResponse)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Developer {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Developer9Developer) public class Developer : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var firstName: Swift.String?
      public var lastName: Swift.String?
      public var email: Swift.String?
      public var phone: Swift.String?
      public var dob: Swift.String?
      public var ssn: Swift.String?
      public var address: Swift.String?
      public var city: Swift.String?
      public var county: Swift.String?
      public var state: Swift.String?
      public var country: Swift.String?
      public var postalCode: Swift.String?
      public var bankAccountNumber: Swift.String?
      public var bankRoutingNumber: Swift.String?
      public var businessLegalName: Swift.String?
      public var tin: Swift.String?
      public var vatRegisterNumber: Swift.String?
      public var sensitiveData: Swift.String?
      public var businessAddress: Swift.String?
      public var businessCity: Swift.String?
      public var businessState: Swift.String?
      public var businessCountry: Swift.String?
      public var businessPostalCode: Swift.String?
      public var billingStatus: CloverConnector.CLVModels.Developer.DeveloperBillingStatus?
      public var billingStatusMessage: Swift.String?
      public var approvalStatus: CloverConnector.CLVModels.Base.ApprovalStatus?
      public var acceptedAgreement: Swift.Bool?
      public var prName: Swift.String?
      public var prEmail: Swift.String?
      public var prPhone: Swift.String?
      public var website: Swift.String?
      public var modifiedTime: Foundation.Date?
      public var owner: CloverConnector.CLVModels.Account.Account?
      public var appBillingSystem: Swift.String?
      public var infoleaseVendorCode: Swift.String?
      public var infoleaseGlCode: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum DeveloperBillingStatus : Swift.String {
      case PENDING
      case APPROVED
      case DECLINED
      case ERROR
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Developer19DeveloperPermission) public class DeveloperPermission : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var label: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Developer13DeveloperRole) public class DeveloperRole : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var label: Swift.String?
      public var system: Swift.Bool?
      public var templateRole: CloverConnector.CLVModels.Developer.DeveloperRole?
      public var accounts: [CloverConnector.CLVModels.Account.Account]?
      public var permissions: [CloverConnector.CLVModels.Employees.Permissions]?
      public var developerRef: CloverConnector.CLVModels.Developer.Developer?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Developer13MerchantGroup) public class MerchantGroup : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var developer_: CloverConnector.CLVModels.Developer.Developer?
      public var createdTime: Foundation.Date?
      public var merchants: [CloverConnector.CLVModels.Merchant.Merchant]?
      public var merchantCount: Swift.Int?
      public var androidVersions: [CloverConnector.CLVModels.Apps.AndroidVersion]?
      public var merchantFilter: Swift.String?
      public var filterMerchants: [CloverConnector.CLVModels.Merchant.Merchant]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Device {
    public enum BuildType : Swift.String {
      case ENG
      case USER
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels6Device6Device) public class Device : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var model: Swift.String?
      public var orderPrefix: Swift.String?
      public var terminalPrefix: Swift.Int?
      public var serial: Swift.String?
      public var buildNumber: Swift.Int?
      public var secureId: Swift.String?
      public var buildType: CloverConnector.CLVModels.Device.BuildType?
      public var cpuId: Swift.String?
      public var imei: Swift.String?
      public var imsi: Swift.String?
      public var simIccid: Swift.String?
      public var deviceCertificate: Swift.String?
      public var pedCertificate: Swift.String?
      public var deviceTypeName: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels6Device15DeviceProvision) public class DeviceProvision : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var deviceRef: CloverConnector.CLVModels.Device.Device?
      public var state: CloverConnector.CLVModels.Device.DeviceProvisionState?
      public var lastActivationCode: Swift.String?
      public var activationCode: Swift.String?
      public var emailSent: Swift.Bool?
      public var hasShipment: Swift.Bool?
      public var serialNumber: Swift.String?
      public var merchant: CloverConnector.CLVModels.Merchant.Merchant?
      public var deviceType: Swift.String?
      public var provisionedTime: Foundation.Date?
      public var activatedTime: Foundation.Date?
      public var reseller: CloverConnector.CLVModels.Base.Reference?
      public var currentRom: CloverConnector.CLVModels.Device.Rom?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum DeviceProvisionState : Swift.String {
      case NOT_ASSOCIATED
      case DISASSOCIATED
      case ASSOCIATED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels6Device3Rom) public class Rom : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var createdAt: Swift.Int?
      public var version_: Swift.Int?
      public var versionName: Swift.String?
      public var description_: Swift.String?
      public var buildType: CloverConnector.CLVModels.Device.RomBuildType?
      public var isCritical: Swift.Bool?
      public var published: Swift.Bool?
      public var enabled: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum RomBuildType : Swift.String {
      case ENG
      case USER
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
public class DeviceStatusRequest : ObjectMapper.Mappable {
  public var sendLastMessage: Swift.Bool
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class DiscoveryRequestMessage : CloverConnector.Message {
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class DiscoveryResponseMessage : CloverConnector.Message {
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class DisplayDiscount : ObjectMapper.Mappable {
  public var id: Swift.String?
  public var lineItemId: Swift.String?
  public var name: Swift.String?
  public var amount: Swift.String?
  public var percentage: Swift.String?
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class DisplayLineItem : ObjectMapper.Mappable {
  public var id: Swift.String?
  public var orderId: Swift.String?
  public var name: Swift.String?
  public var alternateName: Swift.String?
  public var price: Swift.String?
  public var unitPrice: Swift.String?
  public var quantity: Swift.String?
  public var unitQuantity: Swift.String?
  public var note: Swift.String?
  public var printed: Swift.Bool
  public var binName: Swift.String?
  public var userData: Swift.String?
  public var discounts: [CloverConnector.DisplayDiscount]?
  public var discountAmount: Swift.String?
  public var exchanged: Swift.Bool
  public var exchangedAmount: Swift.String?
  public var modifications: [CloverConnector.DisplayModification]?
  public var refunded: Swift.Bool
  public var refundedAmount: Swift.String?
  public var percent: Swift.String?
  required public init()
  public init(id: Swift.String, name: Swift.String, price: Swift.String, quantity: Swift.String)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class DisplayModification : ObjectMapper.Mappable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var amount: Swift.String?
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DisplayOrder : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var id: Swift.String?
  public var currency: Swift.String?
  public var employee: Swift.String?
  public var subtotal: Swift.String?
  public var tax: Swift.String?
  public var total: Swift.String?
  public var title: Swift.String?
  public var note: Swift.String?
  public var serviceChargeName: Swift.String?
  public var serviceChargeAmount: Swift.String?
  public var discounts: [CloverConnector.DisplayDiscount]
  public var lineItems: [CloverConnector.DisplayLineItem]
  public var amountRemaining: Swift.String?
  public var payments: Swift.Array<CloverConnector.DisplayPayment>?
  @objc override required dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class DisplayOrderModifiedOperation : ObjectMapper.Mappable {
  public var ids: Swift.Array<Swift.String>?
  public var orderId: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public init(id: Swift.String)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_inheritsConvenienceInitializers public class LineItemsAddedOperation : CloverConnector.DisplayOrderModifiedOperation {
  required public init?(map: ObjectMapper.Map)
  override public init(id: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers public class LineItemsDeletedOperation : CloverConnector.DisplayOrderModifiedOperation {
  required public init?(map: ObjectMapper.Map)
  override public init(id: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers public class DiscountsAddedOperation : CloverConnector.DisplayOrderModifiedOperation {
  required public init?(map: ObjectMapper.Map)
  override public init(id: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers public class DiscountsRemovedOperation : CloverConnector.DisplayOrderModifiedOperation {
  required public init?(map: ObjectMapper.Map)
  override public init(id: Swift.String)
  @objc deinit
}
public class DisplayPayment : ObjectMapper.Mappable {
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DisplayReceiptOptionsRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var refundId: Swift.String?
  public var creditId: Swift.String?
  public var disablePrinting: Swift.Bool?
  @objc override dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class DisplayReceiptOptionsResponse : CloverConnector.BaseResponse {
  public var resultStatus: CloverConnector.ResultStatus?
  public init(_ status: CloverConnector.ResultStatus, reason: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Employees {
    public enum AccountRole : Swift.String {
      case ADMIN
      case MANAGER
      case EMPLOYEE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Employees8Employee) public class Employee : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var nickname: Swift.String?
      public var customId: Swift.String?
      public var email: Swift.String?
      public var inviteSent: Swift.Bool?
      public var claimedTime: Foundation.Date?
      public var deletedTime: Foundation.Date?
      public var pin: Swift.String?
      public var unhashedPin: Swift.String?
      public var role: CloverConnector.CLVModels.Employees.AccountRole?
      public var roles: [CloverConnector.CLVModels.Employees.Role]?
      public var isOwner: Swift.Bool?
      public var shifts: [CloverConnector.CLVModels.Employees.Shift]?
      public var payments: [CloverConnector.CLVModels.Payments.Payment]?
      public var orders: [CloverConnector.CLVModels.Order.Order]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum Permission : Swift.String {
      case ORDERS_R
      case ORDERS_W
      case INVENTORY_R
      case INVENTORY_W
      case PAYMENTS_R
      case PAYMENTS_W
      case CUSTOMERS_R
      case CUSTOMERS_W
      case EMPLOYEES_R
      case EMPLOYEES_W
      case MERCHANT_R
      case MERCHANT_W
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Employees11Permissions) public class Permissions : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var bits: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Employees13PermissionSet) public class PermissionSet : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var label: Swift.String?
      public var app: CloverConnector.CLVModels.Apps.App?
      public var employeeDefault: Swift.Bool?
      public var managerDefault: Swift.Bool?
      public var permissions: CloverConnector.CLVModels.Employees.Permissions?
      public var roles: [CloverConnector.CLVModels.Employees.Role]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Employees17PermissionSetRole) public class PermissionSetRole : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var role: CloverConnector.CLVModels.Employees.Role?
      public var permissionSet: CloverConnector.CLVModels.Employees.PermissionSet?
      public var modified_time: Swift.Int?
      public var deleted_time: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Employees4Role) public class Role : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var systemRole: CloverConnector.CLVModels.Employees.AccountRole?
      public var employeesRef: [CloverConnector.CLVModels.Employees.Employee]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Employees5Shift) public class Shift : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var employee: CloverConnector.CLVModels.Employees.Employee?
      public var cashTipsCollected: Swift.Int?
      public var serverBanking: Swift.Bool?
      public var inTime: Foundation.Date?
      public var overrideInTime: Foundation.Date?
      public var overrideInEmployee: CloverConnector.CLVModels.Employees.Employee?
      public var outTime: Foundation.Date?
      public var overrideOutTime: Foundation.Date?
      public var overrideOutEmployee: CloverConnector.CLVModels.Employees.Employee?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
public enum ErrorCode : Swift.String {
  case ORDER_NOT_FOUND
  case PAYMENT_NOT_FOUND
  case FAIL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExternalDeviceState : Swift.String {
  case UNKNOWN
  case IDLE
  case BUSY
  case WAITING_FOR_POS
  case WAITING_FOR_CUSTOMER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExternalDeviceSubState : Swift.String {
  case UNKNOWN
  case CUSTOM_ACTIVITY
  case STARTING_PAYMENT_FLOW
  case PROCESSING_PAYMENT
  case PROCESSING_CARD_DATA
  case PROCESSING_CREDIT
  case VERIFY_SIGNATURE
  case TIP_SCREEN
  case RECEIPT_SCREEN
  case CONFIRM_PAYMENT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ExternalDeviceStateData : ObjectMapper.Mappable {
  public var externalPaymentId: Swift.String?
  public var customActivityId: Swift.String?
  public init(externalPaymentId epi: Swift.String?, customActivityId cai: Swift.String?)
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class FinishCancelMessage : CloverConnector.Message {
  public var requestInfo: Swift.String?
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class FinishOkMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var credit: CloverConnector.CLVModels.Payments.Credit?
  public var refund: CloverConnector.CLVModels.Payments.Refund?
  public var signature: CloverConnector.Signature?
  public var requestInfo: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Hours {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Hours9HourRange) public class HourRange : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var start: Swift.Int?
      public var end: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Hours8HoursSet) public class HoursSet : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var reference: CloverConnector.CLVModels.Hours.Reference?
      public var sunday: [CloverConnector.CLVModels.Hours.HourRange]?
      public var monday: [CloverConnector.CLVModels.Hours.HourRange]?
      public var tuesday: [CloverConnector.CLVModels.Hours.HourRange]?
      public var wednesday: [CloverConnector.CLVModels.Hours.HourRange]?
      public var thursday: [CloverConnector.CLVModels.Hours.HourRange]?
      public var friday: [CloverConnector.CLVModels.Hours.HourRange]?
      public var saturday: [CloverConnector.CLVModels.Hours.HourRange]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Hours9Reference) public class Reference : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var type_: CloverConnector.CLVModels.Hours.ReferenceType?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum ReferenceType : Swift.String {
      case ORDER_TYPE
      case ITEM_GROUP
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
public protocol ICloverConnector : AnyObject {
  var CARD_ENTRY_METHOD_MAG_STRIPE: Swift.Int { get }
  var CARD_ENTRY_METHOD_ICC_CONTACT: Swift.Int { get }
  var CARD_ENTRY_METHOD_NFC_CONTACTLESS: Swift.Int { get }
  var CARD_ENTRY_METHOD_MANUAL: Swift.Int { get }
  var CARD_ENTRY_METHODS_DEFAULT: Swift.Int { get }
  var MAX_PAYLOAD_SIZE: Swift.Int { get }
  func addCloverConnectorListener(_ cloverConnectorListener: any CloverConnector.ICloverConnectorListener)
  func removeCloverConnectorListener(_ cloverConnectorListener: any CloverConnector.ICloverConnectorListener)
  func initializeConnection()
  func sale(_ saleRequest: CloverConnector.SaleRequest)
  func auth(_ authRequest: CloverConnector.AuthRequest)
  func preAuth(_ preAuthRequest: CloverConnector.PreAuthRequest)
  func capturePreAuth(_ capturePreAuthRequest: CloverConnector.CapturePreAuthRequest)
  func incrementPreAuth(_ incrementPreAuthRequest: CloverConnector.IncrementPreauthRequest)
  func tipAdjustAuth(_ authTipAdjustRequest: CloverConnector.TipAdjustAuthRequest)
  func voidPayment(_ voidPaymentRequest: CloverConnector.VoidPaymentRequest)
  func refundPayment(_ refundPaymentRequest: CloverConnector.RefundPaymentRequest)
  func voidPaymentRefund(_ request: CloverConnector.VoidPaymentRefundRequest)
  func manualRefund(_ manualRefundRequest: CloverConnector.ManualRefundRequest)
  func closeout(_ closeoutRequest: CloverConnector.CloseoutRequest)
  @available(*, deprecated, message: "Use the new 'displayReceiptOptions()' instead")
  func displayPaymentReceiptOptions(orderId: Swift.String, paymentId: Swift.String)
  func displayReceiptOptions(_ receiptOptionsRequest: CloverConnector.DisplayReceiptOptionsRequest)
  func acceptSignature(_ signatureVerifyRequest: CloverConnector.VerifySignatureRequest)
  func rejectSignature(_ signatureVerifyRequest: CloverConnector.VerifySignatureRequest)
  func vaultCard(_ vaultCardRequest: CloverConnector.VaultCardRequest)
  func print(_ request: CloverConnector.PrintRequest)
  func retrievePrinters(_ request: CloverConnector.RetrievePrintersRequest)
  func retrievePrintJobStatus(_ request: CloverConnector.PrintJobStatusRequest)
  func openCashDrawer(_ request: CloverConnector.OpenCashDrawerRequest)
  func showMessage(_ message: Swift.String)
  func sendDebugLog(_ message: Swift.String)
  func showWelcomeScreen()
  func showThankYouScreen()
  func showDisplayOrder(_ order: CloverConnector.DisplayOrder)
  func removeDisplayOrder(_ order: CloverConnector.DisplayOrder)
  func resetDevice()
  func invokeInputOption(_ inputOption: CloverConnector.InputOption)
  func readCardData(_ request: CloverConnector.ReadCardDataRequest)
  func acceptPayment(_ payment: CloverConnector.CLVModels.Payments.Payment)
  func rejectPayment(_ payment: CloverConnector.CLVModels.Payments.Payment, challenge: CloverConnector.Challenge)
  func retrievePendingPayments()
  func dispose()
  func startCustomActivity(_ request: CloverConnector.CustomActivityRequest)
  func sendMessageToActivity(_ request: CloverConnector.MessageToActivity)
  func retrieveDeviceStatus(_ _request: CloverConnector.RetrieveDeviceStatusRequest)
  func retrievePayment(_ _request: CloverConnector.RetrievePaymentRequest)
  func registerForCustomerProvidedData(_ _request: CloverConnector.RegisterForCustomerProvidedDataRequest)
  func setCustomerInfo(_ _request: CloverConnector.SetCustomerInfoRequest?)
}
public protocol ICloverConnectorListener : AnyObject {
  func onSaleResponse(_ response: CloverConnector.SaleResponse)
  func onAuthResponse(_ authResponse: CloverConnector.AuthResponse)
  func onPreAuthResponse(_ preAuthResponse: CloverConnector.PreAuthResponse)
  func onCapturePreAuthResponse(_ capturePreAuthResponse: CloverConnector.CapturePreAuthResponse)
  func onIncrementPreAuthResponse(_ incrementPreAuthResponse: CloverConnector.IncrementPreauthResponse)
  func onTipAdjustAuthResponse(_ tipAdjustAuthResponse: CloverConnector.TipAdjustAuthResponse)
  func onVoidPaymentResponse(_ voidPaymentResponse: CloverConnector.VoidPaymentResponse)
  func onRefundPaymentResponse(_ refundPaymentResponse: CloverConnector.RefundPaymentResponse)
  func onVoidPaymentRefundResponse(_ response: CloverConnector.VoidPaymentRefundResponse)
  func onManualRefundResponse(_ manualRefundResponse: CloverConnector.ManualRefundResponse)
  func onCloseoutResponse(_ closeoutResponse: CloverConnector.CloseoutResponse)
  func onVerifySignatureRequest(_ signatureVerifyRequest: CloverConnector.VerifySignatureRequest)
  func onVaultCardResponse(_ vaultCardResponse: CloverConnector.VaultCardResponse)
  func onDeviceActivityStart(_ deviceEvent: CloverConnector.CloverDeviceEvent)
  func onDeviceActivityEnd(_ deviceEvent: CloverConnector.CloverDeviceEvent)
  func onDeviceError(_ deviceErrorEvent: CloverConnector.CloverDeviceErrorEvent)
  func onDeviceConnected()
  func onDeviceReady(_ merchantInfo: CloverConnector.MerchantInfo)
  func onDeviceDisconnected()
  func onConfirmPaymentRequest(_ request: CloverConnector.ConfirmPaymentRequest)
  func onTipAdded(_ message: CloverConnector.TipAddedMessage)
  func onPrintManualRefundReceipt(_ printManualRefundReceiptMessage: CloverConnector.PrintManualRefundReceiptMessage)
  func onPrintManualRefundDeclineReceipt(_ printManualRefundDeclineReceiptMessage: CloverConnector.PrintManualRefundDeclineReceiptMessage)
  func onPrintPaymentReceipt(_ printPaymentReceiptMessage: CloverConnector.PrintPaymentReceiptMessage)
  func onPrintPaymentDeclineReceipt(_ printPaymentDeclineReceiptMessage: CloverConnector.PrintPaymentDeclineReceiptMessage)
  func onPrintPaymentMerchantCopyReceipt(_ printPaymentMerchantCopyReceiptMessage: CloverConnector.PrintPaymentMerchantCopyReceiptMessage)
  func onPrintRefundPaymentReceipt(_ printRefundPaymentReceiptMessage: CloverConnector.PrintRefundPaymentReceiptMessage)
  func onRetrievePrintersResponse(_ retrievePrintersResponse: CloverConnector.RetrievePrintersResponse)
  func onPrintJobStatusResponse(_ printJobStatusResponse: CloverConnector.PrintJobStatusResponse)
  func onRetrievePendingPaymentsResponse(_ retrievePendingPaymentResponse: CloverConnector.RetrievePendingPaymentsResponse)
  func onReadCardDataResponse(_ readCardDataResponse: CloverConnector.ReadCardDataResponse)
  func onCustomActivityResponse(_ customActivityResponse: CloverConnector.CustomActivityResponse)
  func onResetDeviceResponse(_ response: CloverConnector.ResetDeviceResponse)
  func onCustomerProvidedDataEvent(_ event: CloverConnector.CustomerProvidedDataEvent)
  func onMessageFromActivity(_ response: CloverConnector.MessageFromActivity)
  func onRetrievePaymentResponse(_ response: CloverConnector.RetrievePaymentResponse)
  func onRetrieveDeviceStatusResponse(_ response: CloverConnector.RetrieveDeviceStatusResponse)
  func onInvalidStateTransitionResponse(_ response: CloverConnector.InvalidStateTransitionResponse)
  func onDisplayReceiptOptionsResponse(_ response: CloverConnector.DisplayReceiptOptionsResponse)
}
@objc public class ImagePrintMessage : CloverConnector.Message {
  public var png: [Swift.UInt8]?
  public var urlString: Swift.String?
  public var printRequestId: Swift.String?
  public var printer: CloverConnector.CLVModels.Printer.Printer?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class Img : ObjectMapper.Mappable {
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class IncrementPreauthMessage : CloverConnector.Message {
  public var amount: Swift.Int?
  public var paymentId: Swift.String?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class IncrementPreauthRequest : ObjectMapper.Mappable {
  public init(amount: Swift.Int, paymentId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class IncrementPreauthResponse : CloverConnector.BaseResponse {
  public var authorization: CloverConnector.CLVModels.Payments.Authorization?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class IncrementPreauthResponseMessage : CloverConnector.Message {
  public var status: CloverConnector.ResultStatus
  public var reason: Swift.String?
  public var authorization: CloverConnector.CLVModels.Payments.Authorization?
  public init(status: CloverConnector.ResultStatus, reason: Swift.String?, authorization: CloverConnector.CLVModels.Payments.Authorization?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InputOption : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var keyPress: CloverConnector.KeyPress? {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
    @objc set
  }
  public init(keyPress: CloverConnector.KeyPress, description: Swift.String)
  @objc override required dynamic public init()
  required public init(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class InvalidStateTransitionResponse : CloverConnector.BaseResponse {
  public var requestedTransition: Swift.String?
  public var state: CloverConnector.ExternalDeviceState?
  public var data: CloverConnector.ExternalDeviceStateData?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Inventory {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory9Attribute) public class Attribute : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var itemGroup: CloverConnector.CLVModels.Inventory.ItemGroup?
      public var options: [CloverConnector.CLVModels.Inventory.Option]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory8Category) public class Category : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var sortOrder: Swift.Int?
      public var items: [CloverConnector.CLVModels.Inventory.Item]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory12CategoryItem) public class CategoryItem : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var item: CloverConnector.CLVModels.Inventory.Item?
      public var category: CloverConnector.CLVModels.Inventory.Category?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory8Discount) public class Discount : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var amount: Swift.Int?
      public var percentage: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory4Item) public class Item : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var hidden: Swift.Bool?
      public var itemGroup: CloverConnector.CLVModels.Inventory.ItemGroup?
      public var name: Swift.String?
      public var alternateName: Swift.String?
      public var code: Swift.String?
      public var sku: Swift.String?
      public var price: Swift.Int?
      public var priceType: CloverConnector.CLVModels.Inventory.PriceType?
      public var defaultTaxRates: Swift.Bool?
      public var unitName: Swift.String?
      public var cost: Swift.Int?
      public var isRevenue: Swift.Bool?
      public var taxRates: [CloverConnector.CLVModels.Inventory.TaxRate]?
      public var modifierGroups: [CloverConnector.CLVModels.Inventory.ModifierGroup]?
      public var categories: [CloverConnector.CLVModels.Inventory.Category]?
      public var tags: [CloverConnector.CLVModels.Inventory.Tag]?
      public var itemStock: CloverConnector.CLVModels.Inventory.ItemStock?
      public var modifiedTime: Foundation.Date?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory9ItemGroup) public class ItemGroup : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var items: [CloverConnector.CLVModels.Inventory.Item]?
      public var attributes: [CloverConnector.CLVModels.Inventory.Attribute]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory17ItemModifierGroup) public class ItemModifierGroup : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var item: CloverConnector.CLVModels.Inventory.Item?
      public var modifierGroup: CloverConnector.CLVModels.Inventory.ModifierGroup?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory9ItemStock) public class ItemStock : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var item: CloverConnector.CLVModels.Inventory.Item?
      public var quantity: Swift.Double?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory8Modifier) public class Modifier : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var alternateName: Swift.String?
      public var price: Swift.Int?
      public var modifierGroup: CloverConnector.CLVModels.Inventory.ModifierGroup?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory13ModifierGroup) public class ModifierGroup : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var alternateName: Swift.String?
      public var minRequired: Swift.Int?
      public var maxAllowed: Swift.Int?
      public var showByDefault: Swift.Bool?
      public var modifiers: [CloverConnector.CLVModels.Inventory.Modifier]?
      public var modifierIds: Swift.String?
      public var items: [CloverConnector.CLVModels.Inventory.Item]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory6Option) public class Option : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var attribute: CloverConnector.CLVModels.Inventory.Attribute?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory10OptionItem) public class OptionItem : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var option: CloverConnector.CLVModels.Inventory.Option?
      public var item: CloverConnector.CLVModels.Inventory.Item?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum PriceType : Swift.String {
      case FIXED
      case VARIABLE
      case PER_UNIT
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory3Tag) public class Tag : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var items: [CloverConnector.CLVModels.Inventory.Item]?
      public var printers: [CloverConnector.CLVModels.Printer.Printer]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory7TagItem) public class TagItem : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var tag: CloverConnector.CLVModels.Inventory.Tag?
      public var item: CloverConnector.CLVModels.Inventory.Item?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory10TagPrinter) public class TagPrinter : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var tag: CloverConnector.CLVModels.Inventory.Tag?
      public var printer: CloverConnector.CLVModels.Printer.Printer?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory7TaxRate) public class TaxRate : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var lineItemRef: CloverConnector.CLVModels.Order.LineItem?
      public var name: Swift.String?
      public var rate: Swift.Int?
      public var isDefault: Swift.Bool?
      public var items: [CloverConnector.CLVModels.Inventory.Item]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels9Inventory11TaxRateItem) public class TaxRateItem : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var taxRate: CloverConnector.CLVModels.Inventory.TaxRate?
      public var item: CloverConnector.CLVModels.Inventory.Item?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
public enum KeyPress : Swift.String {
  case none
  case enter
  case esc
  case backspace
  case tab
  case star
  case button_1
  case button_2
  case button_3
  case button_4
  case button_5
  case button_6
  case button_7
  case button_8
  case digit_1
  case digit_2
  case digit_3
  case digit_4
  case digit_5
  case digit_6
  case digit_7
  case digit_8
  case digit_9
  case digit_0
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class KeyPressMessage : CloverConnector.Message {
  public init()
  public init(keyPress: CloverConnector.KeyPress)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class ListWrapper<T> : ObjectMapper.Mappable where T : ObjectMapper.Mappable {
  public init(jsonObj: Foundation.NSDictionary)
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func addElement(_ obj: T)
  public func removeElement(_ obj: T)
  public func getElement(_ index: Swift.Int) -> T
  public func count() -> Swift.Int
  @objc deinit
}
public class Initable {
  required public init()
  required public init(jsonObj: Foundation.NSDictionary)
  @objc deinit
}
public class StringListWrapper {
  public init(jsonObj: Foundation.NSDictionary)
  public func addElement(_ obj: Swift.String)
  public func removeElement(_ obj: Swift.String)
  public func count()
  @objc deinit
}
@_inheritsConvenienceInitializers public class DictionaryWrapper<T, S> : CloverConnector.Initable {
  required public init()
  required public init(jsonObj: Foundation.NSDictionary)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Loyalty {
    @objc public class LoyaltyDataConfig : ObjectiveC.NSObject, ObjectMapper.Mappable {
      public var type: Swift.String?
      public var configuration: [Swift.String : Swift.String]?
      public init(configuration: [Swift.String : Swift.String]?, type: Swift.String?)
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public class Offer : ObjectMapper.Mappable {
      public var id: Swift.String?
      public var label: Swift.String?
      public var description: Swift.String?
      public var cost: Swift.Int?
      public init(id: Swift.String? = nil, label: Swift.String? = nil, description: Swift.String? = nil, cost: Swift.Int? = nil)
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class LoyaltyDataTypes {
      public static let VAS_TYPE: Swift.String
      public static let EMAIL_TYPE: Swift.String
      public static let PHONE_TYPE: Swift.String
      public static let CLEAR_TYPE: Swift.String
      @_hasMissingDesignatedInitializers public class VAS_TYPE_KEYS {
        public static let PUSH_URL: Swift.String
        public static let PROTOCOL_CONFIG: Swift.String
        public static let PROTOCOL_ID: Swift.String
        public static let PROVIDER_PACKAGE: Swift.String
        public static let PUSH_TITLE: Swift.String
        public static let SUPPORTED_SERVICES: Swift.String
        @objc deinit
      }
      @objc deinit
    }
    public enum VasProtocol : Swift.String {
      case ST
      case PK
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum VasDataTypeType : Swift.String, Swift.CaseIterable {
      case ALL
      case LOYALTY
      case OFFER
      case GIFT_CARD
      case PRIVATE_LABEL_CARD
      case CUSTOMER
      case VAS_DATA
      public static var allCasesJson: Swift.String? {
        get
      }
      public static func casesJson(cases: [CloverConnector.CLVModels.Loyalty.VasDataTypeType]) -> Swift.String?
      public init?(rawValue: Swift.String)
      public typealias AllCases = [CloverConnector.CLVModels.Loyalty.VasDataTypeType]
      public typealias RawValue = Swift.String
      public static var allCases: [CloverConnector.CLVModels.Loyalty.VasDataTypeType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers public class ManualRefundRequest : CloverConnector.TransactionRequest {
  override public var type: CloverConnector.TransactionType {
    get
    set
  }
  override public init(amount: Swift.Int, externalId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ManualRefundResponse : CloverConnector.BaseResponse {
  public var credit: CloverConnector.CLVModels.Payments.Credit? {
    get
  }
  public var transactionNumber: Swift.String? {
    get
  }
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Merchant {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant7Gateway) public class Gateway : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var paymentProcessorName: Swift.String?
      public var authorizationFrontEnd: Swift.String?
      public var acquiringBackEnd: Swift.String?
      public var paymentGatewayApi: Swift.String?
      public var accountName: Swift.String?
      public var mid: Swift.String?
      public var tid: Swift.String?
      public var storeId: Swift.String?
      public var supportsTipping: Swift.Bool?
      public var frontendMid: Swift.String?
      public var backendMid: Swift.String?
      public var supportsTipAdjust: Swift.Bool?
      public var supportsNakedCredit: Swift.Bool?
      public var supportsMultiPayToken: Swift.Bool?
      public var keyPrefix: Swift.String?
      public var keyInfo: [Swift.String : Swift.String]?
      public var closingTime: Swift.String?
      public var newBatchCloseEnabled: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant4Logo) public class Logo : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var logoType: CloverConnector.CLVModels.Merchant.LogoType?
      public var logoFilename: Swift.String?
      public var url: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum LogoType : Swift.String {
      case BUSINESS
      case RECEIPT
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant8Merchant) public class Merchant : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var owner: CloverConnector.CLVModels.Employees.Employee?
      public var address: CloverConnector.CLVModels.Base.Address?
      public var merchantPlan: CloverConnector.CLVModels.Merchant.MerchantPlan?
      public var defaultCurrency: Swift.String?
      public var phoneNumber: Swift.String?
      public var website: Swift.String?
      public var logos: [CloverConnector.CLVModels.Merchant.Logo]?
      public var createdTime: Foundation.Date?
      public var properties: CloverConnector.CLVModels.Merchant.MerchantProperties?
      public var gateway: CloverConnector.CLVModels.Merchant.Gateway?
      public var tipSuggestions: [CloverConnector.CLVModels.Merchant.TipSuggestion]?
      public var employees: [CloverConnector.CLVModels.Employees.Employee]?
      public var items: [CloverConnector.CLVModels.Inventory.Item]?
      public var tags: [CloverConnector.CLVModels.Inventory.Tag]?
      public var tenders: [CloverConnector.CLVModels.Base.Tender]?
      public var shifts: [CloverConnector.CLVModels.Employees.Shift]?
      public var orders: [CloverConnector.CLVModels.Order.Order]?
      public var payments: [CloverConnector.CLVModels.Payments.Payment]?
      public var taxRates: [CloverConnector.CLVModels.Inventory.TaxRate]?
      public var printers: [CloverConnector.CLVModels.Printer.Printer]?
      public var modifierGroups: [CloverConnector.CLVModels.Inventory.ModifierGroup]?
      public var orderTypes: [CloverConnector.CLVModels.Order.OrderType]?
      public var reseller: CloverConnector.CLVModels.Base.Reference?
      public var opening_hours: [CloverConnector.CLVModels.Hours.HoursSet]?
      public var businessTypeCode: CloverConnector.CLVModels.Base.BusinessTypeCode?
      public var isBillable: Swift.Bool?
      public var devices: [CloverConnector.CLVModels.Device.Device]?
      public var merchantGroups: [CloverConnector.CLVModels.Developer.MerchantGroup]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant12MerchantPlan) public class MerchantPlan : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var description_: Swift.String?
      public var price: Swift.Int?
      public var modules: [CloverConnector.CLVModels.Merchant.Module]?
      public var appBundle: CloverConnector.CLVModels.Apps.AppBundle?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant18MerchantProperties) public class MerchantProperties : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var defaultCurrency: Swift.String?
      public var tipsEnabled: Swift.Bool?
      public var receiptProperties: Swift.String?
      public var summaryHour: Swift.Int?
      public var signatureThreshold: Swift.Int?
      public var hasDefaultEmployee: Swift.Bool?
      public var tipRateDefault: Swift.Int?
      public var onPaperTipSignatures: Swift.Bool?
      public var autoLogout: Swift.Bool?
      public var orderTitle: CloverConnector.CLVModels.Merchant.OrderTitle?
      public var orderTitleMax: Swift.Int?
      public var resetOnReportingTime: Swift.Bool?
      public var notesOnOrders: Swift.Bool?
      public var deleteOrders: Swift.Bool?
      public var removeTaxEnabled: Swift.Bool?
      public var groupLineItems: Swift.Bool?
      public var alternateInventoryNames: Swift.Bool?
      public var autoPrint: Swift.Bool?
      public var hardwareProfile: Swift.String?
      public var infoleaseSuppressBilling: Swift.Bool?
      public var infoleaseSuppressPlanBilling: Swift.Bool?
      public var shippingAddress: Swift.String?
      public var marketingEnabled: Swift.Bool?
      public var marketingPreferenceText: Swift.String?
      public var bankMarker: Swift.Int?
      public var supportPhone: Swift.String?
      public var supportEmail: Swift.String?
      public var manualCloseout: Swift.Bool?
      public var showCloseoutOrders: Swift.Bool?
      public var sendCloseoutEmail: Swift.Bool?
      public var stayInCategory: Swift.Bool?
      public var locale: Swift.String?
      public var timezone: Swift.String?
      public var vat: Swift.Bool?
      public var vatTaxName: Swift.String?
      public var appBillingSystem: Swift.String?
      public var abaAccountNumber: Swift.String?
      public var ddaAccountNumber: Swift.String?
      public var trackStock: Swift.Bool?
      public var updateStock: Swift.Bool?
      public var allowClockOutWithOpenOrders: Swift.Bool?
      public var logInClockInPrompt: Swift.Bool?
      public var accountType: Swift.String?
      public var businessTypeCode: CloverConnector.CLVModels.Base.BusinessTypeCode?
      public var pinLength: Swift.Int?
      public var cashBackEnabled: Swift.Bool?
      public var cashBackOptions: Swift.String?
      public var maxCashBack: Swift.Int?
      public var hierarchy: Swift.String?
      public var hasConsented: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant6Module) public class Module : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum OrderTitle : Swift.String {
      case NONE
      case MANUAL
      case AUTOMATIC
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum SyncLevel : Swift.String {
      case LOW
      case MEDIUM
      case HIGH
      case NONE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant12SyncSettings) public class SyncSettings : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var authority: Swift.String?
      public var level: CloverConnector.CLVModels.Merchant.SyncLevel?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Merchant13TipSuggestion) public class TipSuggestion : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var percentage: Swift.Int?
      public var amount: Swift.Int?
      public var isEnabled: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers public class MerchantInfo : ObjectiveC.NSObject {
  public var merchantId: Swift.String? {
    get
  }
  public var merchantMId: Swift.String? {
    get
  }
  public var merchantName: Swift.String? {
    get
  }
  public var supportsAuths: Swift.Bool
  public var supportsPreAuths: Swift.Bool
  public var supportsSales: Swift.Bool
  public var supportsVaultCards: Swift.Bool
  public var supportsManualRefunds: Swift.Bool
  public var supportsVoids: Swift.Bool
  public var supportsTipAdjust: Swift.Bool
  public var deviceInfo: CloverConnector.DeviceInfo? {
    get
  }
  @objc override dynamic public init()
  public init(id: Swift.String?, mid: Swift.String?, name: Swift.String?, deviceName: Swift.String?, deviceSerialNumber: Swift.String?, deviceModel: Swift.String?)
  @objc deinit
}
@objc public class DeviceInfo : ObjectiveC.NSObject {
  public var deviceName: Swift.String? {
    get
  }
  public var deviceSerial: Swift.String? {
    get
  }
  public var deviceModel: Swift.String? {
    get
  }
  public init(name: Swift.String?, serial: Swift.String?, model: Swift.String?)
  @objc deinit
}
@objc public class Message : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var method: CloverConnector.Method {
    get
  }
  public var version: Swift.Int
  public init(method: CloverConnector.Method)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MessageFromActivity : CloverConnector.BaseActivityMessage {
  override public init(action a: Swift.String, payload p: Swift.String? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MessageToActivity : CloverConnector.BaseActivityMessage {
  override public init(action a: Swift.String, payload p: Swift.String? = nil)
  @objc deinit
}
public enum Method : Swift.String {
  case ACK
  case CLOSEOUT_RESPONSE
  case CLOSEOUT_REQUEST
  case CAPTURE_PREAUTH_RESPONSE
  case CAPTURE_PREAUTH
  case INCREMENT_PREAUTH_REQUEST
  case INCREMENT_PREAUTH_RESPONSE
  case LAST_MSG_REQUEST
  case LAST_MSG_RESPONSE
  case TIP_ADJUST
  case TIP_ADJUST_RESPONSE
  case OPEN_CASH_DRAWER
  case SHOW_PAYMENT_RECEIPT_OPTIONS
  case REFUND_RESPONSE
  case REFUND_REQUEST
  case TX_START
  case TX_START_RESPONSE
  case KEY_PRESS
  case UI_STATE
  case TX_STATE
  case FINISH_OK
  case FINISH_CANCEL
  case DISCOVERY_REQUEST
  case DISCOVERY_RESPONSE
  case TIP_ADDED
  case VERIFY_SIGNATURE
  case SIGNATURE_VERIFIED
  case PAYMENT_VOIDED
  case PRINT_PAYMENT
  case REFUND_PRINT_PAYMENT
  case PRINT_PAYMENT_MERCHANT_COPY
  case PRINT_CREDIT
  case PRINT_PAYMENT_DECLINE
  case PRINT_CREDIT_DECLINE
  case PRINT_TEXT
  case PRINT_IMAGE
  case GET_PRINTERS_REQUEST
  case GET_PRINTERS_RESPONSE
  case PRINT_JOB_STATUS_REQUEST
  case PRINT_JOB_STATUS_RESPONSE
  case TERMINAL_MESSAGE
  case SHOW_WELCOME_SCREEN
  case SHOW_THANK_YOU_SCREEN
  case SHOW_ORDER_SCREEN
  case BREAK
  case CASHBACK_SELECTED
  case PARTIAL_AUTH
  case VOID_PAYMENT
  case VOID_PAYMENT_RESPONSE
  case ORDER_ACTION_ADD_DISCOUNT
  case ORDER_ACTION_REMOVE_DISCOUNT
  case ORDER_ACTION_ADD_LINE_ITEM
  case ORDER_ACTION_REMOVE_LINE_ITEM
  case ORDER_ACTION_RESPONSE
  case VAULT_CARD
  case VAULT_CARD_RESPONSE
  case RETRIEVE_PENDING_PAYMENTS_RESPONSE
  case RETRIEVE_PENDING_PAYMENTS
  case CARD_DATA_RESPONSE
  case CARD_DATA
  case CONFIRM_PAYMENT_MESSAGE
  case PAYMENT_CONFIRMED
  case PAYMENT_REJECTED
  case LOG_MESSAGE
  case ACTIVITY_REQUEST
  case ACTIVITY_RESPONSE
  case REMOTE_ERROR
  case RETRIEVE_DEVICE_STATUS_REQUEST
  case RETRIEVE_DEVICE_STATUS_RESPONSE
  case RETRIEVE_PAYMENT_REQUEST
  case RETRIEVE_PAYMENT_RESPONSE
  case ACTIVITY_MESSAGE_TO_ACTIVITY
  case ACTIVITY_MESSAGE_FROM_ACTIVITY
  case RESET_DEVICE_RESPONSE
  case CLOVER_DEVICE_LOG_REQUEST
  case REGISTER_FOR_CUST_DATA
  case CUSTOMER_PROVIDED_DATA_MESSAGE
  case CUSTOMER_INFO_MESSAGE
  case SHOW_RECEIPT_OPTIONS
  case SHOW_RECEIPT_OPTIONS_RESPONSE
  case INVALID_STATE_TRANSITION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class OpenCashDrawerMessage : CloverConnector.Message {
  public var reason: Swift.String?
  public var printer: CloverConnector.CLVModels.Printer.Printer?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenCashDrawerRequest : ObjectiveC.NSObject {
  public init(_ reason: Swift.String?, deviceId: Swift.String?)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Order {
    public enum CustomerIdMethod : Swift.String {
      case NAME
      case TABLE
      case NAME_TABLE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order8Discount) public class Discount : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderRef: CloverConnector.CLVModels.Order.Order?
      public var lineItemRef: CloverConnector.CLVModels.Order.LineItem?
      public var discount: CloverConnector.CLVModels.Inventory.Discount?
      public var name: Swift.String?
      public var amount: Swift.Int?
      public var percentage: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order9FireOrder) public class FireOrder : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderId: Swift.String?
      public var delay: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum HoursAvailable : Swift.String {
      case ALL
      case BUSINESS
      case CUSTOM
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order8LineItem) public class LineItem : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderRef: CloverConnector.CLVModels.Order.Order?
      public var item: CloverConnector.CLVModels.Inventory.Item?
      public var name: Swift.String?
      public var alternateName: Swift.String?
      public var price: Swift.Int?
      public var unitQty: Swift.Int?
      public var unitName: Swift.String?
      public var itemCode: Swift.String?
      public var note: Swift.String?
      public var printed: Swift.Bool?
      public var exchangedLineItem: CloverConnector.CLVModels.Order.LineItem?
      public var binName: Swift.String?
      public var userData: Swift.String?
      public var createdTime: Foundation.Date?
      public var orderClientCreatedTime: Foundation.Date?
      public var discounts: [CloverConnector.CLVModels.Order.Discount]?
      public var discountAmount: Swift.Int?
      public var exchanged: Swift.Bool?
      public var modifications: [CloverConnector.CLVModels.Order.Modification]?
      public var refunded: Swift.Bool?
      public var isRevenue: Swift.Bool?
      public var taxRates: [CloverConnector.CLVModels.Inventory.TaxRate]?
      public var payments: [CloverConnector.CLVModels.Payments.LineItemPayment]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order12Modification) public class Modification : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var lineItemRef: CloverConnector.CLVModels.Order.LineItem?
      public var name: Swift.String?
      public var alternateName: Swift.String?
      public var amount: Swift.Int?
      public var modifier: CloverConnector.CLVModels.Inventory.Modifier?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order5Order) public class Order : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var currency: Swift.String?
      public var customers: [CloverConnector.CLVModels.Customers.Customer]?
      public var employee: CloverConnector.CLVModels.Employees.Employee?
      public var total: Swift.Int?
      public var title: Swift.String?
      public var note: Swift.String?
      public var orderType: CloverConnector.CLVModels.Order.OrderType?
      public var taxRemoved: Swift.Bool?
      public var isVat: Swift.Bool?
      public var state: Swift.String?
      public var manualTransaction: Swift.Bool?
      public var groupLineItems: Swift.Bool?
      public var testMode: Swift.Bool?
      public var payType: CloverConnector.CLVModels.Order.PayType?
      public var createdTime: Foundation.Date?
      public var clientCreatedTime: Foundation.Date?
      public var modifiedTime: Foundation.Date?
      public var deletedTimestamp: Foundation.Date?
      public var serviceCharge: CloverConnector.CLVModels.Base.ServiceCharge?
      public var discounts: [CloverConnector.CLVModels.Order.Discount]?
      public var lineItems: [CloverConnector.CLVModels.Order.LineItem]?
      public var taxRates: [CloverConnector.CLVModels.Order.OrderTaxRate]?
      public var payments: [CloverConnector.CLVModels.Payments.Payment]?
      public var refunds: [CloverConnector.CLVModels.Payments.Refund]?
      public var credits: [CloverConnector.CLVModels.Payments.Credit]?
      public var voids: [CloverConnector.CLVModels.Payments.Payment]?
      public var device: CloverConnector.CLVModels.Device.Device?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order12OrderTaxRate) public class OrderTaxRate : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var amount: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order9OrderType) public class OrderType : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var labelKey: Swift.String?
      public var label: Swift.String?
      public var taxable: Swift.Bool?
      public var isDefault: Swift.Bool?
      public var filterCategories: Swift.Bool?
      public var isHidden: Swift.Bool?
      public var fee: Swift.Int?
      public var minOrderAmount: Swift.Int?
      public var maxOrderAmount: Swift.Int?
      public var maxRadius: Swift.Int?
      public var avgOrderTime: Swift.Int?
      public var hoursAvailable: CloverConnector.CLVModels.Order.HoursAvailable?
      public var customerIdMethod: CloverConnector.CLVModels.Order.CustomerIdMethod?
      public var isDeleted: Swift.Bool?
      public var systemOrderTypeId: Swift.String?
      public var hours: CloverConnector.CLVModels.Hours.HoursSet?
      public var categories: [CloverConnector.CLVModels.Inventory.Category]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order17OrderTypeCategory) public class OrderTypeCategory : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var orderType: CloverConnector.CLVModels.Order.OrderType?
      public var category: CloverConnector.CLVModels.Inventory.Category?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum PayType : Swift.String {
      case SPLIT_GUEST
      case SPLIT_ITEM
      case SPLIT_CUSTOM
      case FULL
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels5Order15SystemOrderType) public class SystemOrderType : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var labelKey: Swift.String?
      public var isQsr: Swift.Bool?
      public var isFsr: Swift.Bool?
      public var isRetail: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum VoidReason : Swift.String {
      case USER_CANCEL
      case TRANSPORT_ERROR
      case REJECT_SIGNATURE
      case REJECT_PARTIAL_AUTH
      case NOT_APPROVED
      case FAILED
      case AUTH_CLOSED_NEW_CARD
      case DEVELOPER_PAY_PARTIAL_AUTH
      case REJECT_DUPLICATE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
@objc public class OrderActionAddDiscountMessage : CloverConnector.Message {
  public var addDiscountAction: CloverConnector.AddDiscountAction?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class OrderActionLineItemMessage : CloverConnector.Message {
  public var addLineItemAction: CloverConnector.AddLineItemAction?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class OrderActionRemoveDiscountMessage : CloverConnector.Message {
  public var removeDiscountAction: CloverConnector.RemoveDiscountAction?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class OrderActionRemoveLineItemMessage : CloverConnector.Message {
  public var removeLineItem: CloverConnector.RemoveLineItemAction?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class OrderActionResponse : ObjectMapper.Mappable {
  public var id: Swift.String?
  public var accepted: Swift.Bool?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class OrderActionResponseMessage : CloverConnector.Message {
  public var orderActionResponse: CloverConnector.OrderActionResponse?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class OrderUpdateMessage : CloverConnector.Message {
  public var displayOrder: CloverConnector.DisplayOrder?
  public var operation: CloverConnector.DisplayOrderModifiedOperation?
  public init()
  public init(displayOrder: CloverConnector.DisplayOrder, operation: CloverConnector.DisplayOrderModifiedOperation?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public struct PairingCode {
}
public class PairingCodeMessage : ObjectMapper.Mappable {
  public init(pairingCode: Swift.String)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public protocol PairingDeviceConfiguration {
  func onPairingCode(_ pairingCode: Swift.String)
  func onPairingSuccess(_ authToken: Swift.String)
}
public class PairingRequest : ObjectMapper.Mappable {
  public var method: Swift.String
  public var serialNumber: Swift.String?
  public var name: Swift.String?
  public var authenticationToken: Swift.String?
  public var remoteApplicationID: Swift.String?
  public var remoteSourceSDK: Swift.String?
  public init(name: Swift.String, serialNumber: Swift.String, token: Swift.String?, remoteApplicationID: Swift.String?, remoteSourceSDK: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class PairingRequestMessage : ObjectMapper.Mappable {
  public var method: Swift.String
  public var id: Swift.String?
  public var payload: Swift.String?
  public var type: Swift.String
  public var remoteApplicationID: Swift.String?
  public var remoteSourceSDK: Swift.String?
  public init(request: CloverConnector.PairingRequest)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class PairingResponse : CloverConnector.PairingRequest {
  public var pairingState: Swift.String?
  public var applicationName: Swift.String?
  public var millis: Swift.Int?
  public init(name: Swift.String, serialNumber: Swift.String, pairingState: Swift.String, applicationName: Swift.String, authenticationToken: Swift.String, millis: Swift.Int)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class PairingResponseMessage : ObjectMapper.Mappable {
  public var method: Swift.String?
  public var id: Swift.String?
  public var payload: Swift.String?
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PartialAuthMessage : CloverConnector.Message {
  public var partialAuthAmount: Swift.Int?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class PayIntent : ObjectMapper.Mappable {
  public var action: Swift.String? {
    get
  }
  public var amount: Swift.Int {
    get
  }
  public var tipAmount: Swift.Int? {
    get
  }
  public var taxAmount: Swift.Int? {
    get
  }
  public var orderId: Swift.String? {
    get
  }
  public var paymentId: Swift.String? {
    get
  }
  public var employeeId: Swift.String? {
    get
  }
  public var transactionType: CloverConnector.TransactionType? {
    get
  }
  public var isDisableCashBack: Swift.Bool {
    get
  }
  public var isTesting: Swift.Bool {
    get
  }
  public var cardEntryMethods: Swift.Int {
    get
  }
  public var voiceAuthCode: Swift.String? {
    get
  }
  public var postalCode: Swift.String? {
    get
  }
  public var streetAddress: Swift.String? {
    get
  }
  public var isCardNotPresent: Swift.Bool? {
    get
  }
  public var cardDataMessage: Swift.String? {
    get
  }
  public var remotePrint: Swift.Bool? {
    get
  }
  public var transactionNo: Swift.String? {
    get
  }
  public var isForceSwipePinEntry: Swift.Bool? {
    get
  }
  public var externalPaymentId: Swift.String? {
    get
  }
  public var vaultedCard: CloverConnector.CLVModels.Payments.VaultedCard? {
    get
  }
  public var allowOfflinePayment: Swift.Bool? {
    get
  }
  public var approveOfflinePaymentWithoutPrompt: Swift.Bool? {
    get
  }
  public var requiresRemoteConfirmation: Swift.Bool? {
    get
  }
  public var applicationTracking: CloverConnector.CLVModels.Apps.AppTracking? {
    get
  }
  public var allowPartialAuth: Swift.Bool {
    get
  }
  public var transactionSettings: CloverConnector.CLVModels.Payments.TransactionSettings? {
    get
  }
  public var disableCreditSurcharge: Swift.Bool {
    get
  }
  public var passThroughValues: [Swift.String : Swift.String]? {
    get
  }
  public init(amount: Swift.Int, externalId: Swift.String)
  required public init()
  required public init(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public class Builder {
    public var action: Swift.String?
    public var amount: Swift.Int
    public var tipAmount: Swift.Int?
    public var taxAmount: Swift.Int?
    public var orderId: Swift.String?
    public var paymentId: Swift.String?
    public var employeeId: Swift.String?
    public var transactionType: CloverConnector.TransactionType?
    public var isDisableCashBack: Swift.Bool
    public var isTesting: Swift.Bool
    public var cardEntryMethods: Swift.Int
    public var voiceAuthCode: Swift.String?
    public var postalCode: Swift.String?
    public var streetAddress: Swift.String?
    public var isCardNotPresent: Swift.Bool
    public var cardDataMessage: Swift.String?
    public var remotePrint: Swift.Bool
    public var transactionNo: Swift.String?
    public var isForceSwipePinEntry: Swift.Bool
    public var externalPaymentId: Swift.String?
    public var vaultedCard: CloverConnector.CLVModels.Payments.VaultedCard?
    public var allowOfflinePayment: Swift.Bool?
    public var approveOfflinePaymentWithoutPrompt: Swift.Bool?
    public var requiresRemoteConfirmation: Swift.Bool?
    public var applicationTracking: CloverConnector.CLVModels.Apps.AppTracking?
    public var allowPartialAuth: Swift.Bool
    public var transactionSettings: CloverConnector.CLVModels.Payments.TransactionSettings?
    public var disableCreditSurcharge: Swift.Bool
    public var passThroughValues: [Swift.String : Swift.String]?
    public init(amount: Swift.Int, externalId: Swift.String)
    public init(amount: Swift.Int, paymentId: Swift.String)
    public func build() -> CloverConnector.PayIntent
    @objc deinit
  }
  @objc deinit
}
@objc public class PaymentConfirmedMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PaymentRejectedMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var reason: CloverConnector.VoidReason?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PaymentPrintMerchantCopyMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PaymentPrintMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var order: CloverConnector.CLVModels.Order.Order?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PaymentResponse : CloverConnector.BaseResponse {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var signature: CloverConnector.Signature?
  public var isPreAuth: Swift.Bool {
    get
  }
  public var isAuth: Swift.Bool {
    get
  }
  public var isSale: Swift.Bool {
    get
  }
  public init(success: Swift.Bool, result: CloverConnector.ResultCode, payment: CloverConnector.CLVModels.Payments.Payment? = nil, signature: CloverConnector.Signature? = nil)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Payments {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments13Authorization) public class Authorization : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var payment: CloverConnector.CLVModels.Payments.Payment?
      public var tabName: Swift.String?
      public var amount: Swift.Int?
      public var cardType: CloverConnector.CLVModels.Payments.CardType?
      public var last4: Swift.String?
      public var authcode: Swift.String?
      public var type_: CloverConnector.CLVModels.Payments.Type_?
      public var note: Swift.String?
      public var closingPayment: CloverConnector.CLVModels.Payments.Payment?
      public var createdTime: Foundation.Date?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc(_TtCCC15CloverConnector9CLVModels8Payments24IncrementalAuthorization) public class IncrementalAuthorization : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var amount: Swift.Int?
      public var cardTransaction: CloverConnector.CLVModels.Payments.CardTransaction?
      public var result: CloverConnector.CLVModels.Payments.Result?
      public var createdTime: Foundation.Date?
      public var employee: CloverConnector.CLVModels.Employees.Employee?
      @objc public func encode(with coder: Foundation.NSCoder)
      @objc required public init(coder decoder: Foundation.NSCoder)
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum AVSResult : Swift.String {
      case SUCCESS
      case ZIP_CODE_MATCH
      case ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED
      case ADDRESS_MATCH
      case ADDRESS_MATCH_ZIP_NOT_CHECKED
      case NEITHER_MATCH
      case SERVICE_FAILURE
      case SERVICE_UNAVAILABLE
      case NOT_CHECKED
      case ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED
      case ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments5Batch) public class Batch : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var merchantId: Swift.Int?
      public var firstGatewayTxId: Swift.Int?
      public var lastGatewayTxId: Swift.Int?
      public var accountId: Swift.Int?
      public var txCount: Swift.Int?
      public var totalBatchAmount: Swift.Int?
      public var devices: Swift.String?
      public var state: CloverConnector.CLVModels.Payments.BatchState?
      public var batchType: CloverConnector.CLVModels.Payments.BatchType?
      public var createdTime: Foundation.Date?
      public var modifiedTime: Foundation.Date?
      public var batchDetails: CloverConnector.CLVModels.Payments.BatchDetail?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments14BatchCardTotal) public class BatchCardTotal : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var cardType: CloverConnector.CLVModels.Payments.CardType?
      public var count: Swift.Int?
      public var total: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments11BatchDetail) public class BatchDetail : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var batchTotals: CloverConnector.CLVModels.Payments.BatchTotalStats?
      public var serverTotals: [CloverConnector.CLVModels.Payments.ServerTotalStats]?
      public var cardTotals: [CloverConnector.CLVModels.Payments.BatchCardTotal]?
      public var openTips: Swift.Int?
      public var openTabs: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments12BatchRequest) public class BatchRequest : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var devices: [Swift.String]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum BatchState : Swift.String {
      case OPEN
      case QUEUED_FOR_PROCESSING
      case PROCESSING
      case CLOSED
      case FAILED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments15BatchTotalStats) public class BatchTotalStats : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var sales: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var refunds: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var net: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var giftCardLoads: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var giftCardCashOuts: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var tax: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var tips: CloverConnector.CLVModels.Payments.BatchTotalType?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments14BatchTotalType) public class BatchTotalType : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var count: Swift.Int?
      public var total: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum BatchType : Swift.String {
      case MANUAL_CLOSE
      case AUTO_CLOSE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum CardEntryType : Swift.String {
      case SWIPED
      case KEYED
      case VOICE
      case VAULTED
      case OFFLINE_SWIPED
      case OFFLINE_KEYED
      case EMV_CONTACT
      case EMV_CONTACTLESS
      case MSD_CONTACTLESS
      case PINPAD_MANUAL_ENTRY
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments15CardTransaction) public class CardTransaction : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var paymentRef: CloverConnector.CLVModels.Payments.Payment?
      public var creditRef: CloverConnector.CLVModels.Payments.Credit?
      public var cardType: CloverConnector.CLVModels.Payments.CardType?
      public var entryType: CloverConnector.CLVModels.Payments.CardEntryType?
      public var first6: Swift.String?
      public var last4: Swift.String?
      public var type_: CloverConnector.CLVModels.Payments.CardTransactionType?
      public var authCode: Swift.String?
      public var referenceId: Swift.String?
      public var transactionNo: Swift.String?
      public var state: CloverConnector.CLVModels.Payments.CardTransactionState?
      public var extra: [Swift.String : Swift.String]?
      public var begBalance: Swift.Int?
      public var endBalance: Swift.Int?
      public var avsResult: CloverConnector.CLVModels.Payments.AVSResult?
      public var cardholderName: Swift.String?
      public var token: Swift.String?
      public var vaultedCard: CloverConnector.CLVModels.Payments.VaultedCard?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum CardTransactionState : Swift.String {
      case PENDING
      case CLOSED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum CardTransactionType : Swift.String {
      case AUTH
      case PREAUTH
      case PREAUTHCAPTURE
      case ADJUST
      case VOID
      case VOIDRETURN
      case RETURN
      case REFUND
      case NAKEDREFUND
      case GETBALANCE
      case BATCHCLOSE
      case ACTIVATE
      case BALANCE_LOCK
      case LOAD
      case CASHOUT
      case CASHOUT_ACTIVE_STATUS
      case REDEMPTION
      case REDEMPTION_UNLOCK
      case RELOAD
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum CardType : Swift.String {
      case VISA
      case MC
      case AMEX
      case DISCOVER
      case DINERS_CLUB
      case JCB
      case MAESTRO
      case SOLO
      case LASER
      case CHINA_UNION_PAY
      case CARTE_BLANCHE
      case UNKNOWN
      case GIFT_CARD
      case EBT
      case INTERAC
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments6Credit) public class Credit : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderRef: CloverConnector.CLVModels.Order.Order?
      public var device: CloverConnector.CLVModels.Device.Device?
      public var tender: CloverConnector.CLVModels.Base.Tender?
      public var employee: CloverConnector.CLVModels.Employees.Employee?
      public var customers: CloverConnector.CLVModels.Customers.Customer?
      public var amount: Swift.Int?
      public var taxAmount: Swift.Int?
      public var taxRates: [CloverConnector.CLVModels.Payments.TaxableAmountRate]?
      public var createdTime: Foundation.Date?
      public var clientCreatedTime: Foundation.Date?
      public var cardTransaction: CloverConnector.CLVModels.Payments.CardTransaction?
      public var voided: Swift.Bool?
      public var voidReason: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum Currency : Swift.String {
      case USD
      case GBP
      case EUR
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum CvmResult : Swift.String {
      case NO_CVM_REQUIRED
      case SIGNATURE
      case PIN
      case ONLINE_PIN
      case SIGNATURE_AND_PIN
      case CVM_FAILED
      case DEVICE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum CVVResult : Swift.String {
      case SUCCESS
      case FAILURE
      case NOT_PROCESSED
      case NOT_PRESENT
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum DataEntryLocation : Swift.String {
      case ON_SCREEN
      case ON_PAPER
      case NONE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments10GatewayTxs) public class GatewayTxs : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var merchantGatewayId: Swift.Int?
      public var clientId: Swift.String?
      public var amount: Swift.Int?
      public var adjustAmount: Swift.Int?
      public var taxAmount: Swift.Int?
      public var tipAmount: Swift.Int?
      public var currency: CloverConnector.CLVModels.Payments.Currency?
      public var state: CloverConnector.CLVModels.Payments.GatewayTxState?
      public var retries: Swift.Int?
      public var type_: CloverConnector.CLVModels.Payments.GatewayTxType?
      public var entryType: CloverConnector.CLVModels.Payments.CardEntryType?
      public var responseCode: Swift.String?
      public var responseMessage: Swift.String?
      public var first4: Swift.String?
      public var last4: Swift.String?
      public var cardType: CloverConnector.CLVModels.Payments.CardType?
      public var refnum: Swift.String?
      public var token: Swift.String?
      public var authcode: Swift.String?
      public var employeeId: Swift.String?
      public var extra: Swift.String?
      public var captured: Swift.Bool?
      public var swiperSerial: Swift.String?
      public var ksnPrefix: Swift.String?
      public var createdTime: Foundation.Date?
      public var modifiedTime: Foundation.Date?
      public var refundId: Swift.Int?
      public var paymentRefundId: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum GatewayTxState : Swift.String {
      case INITIATED
      case INITIATED_ON_AUTH
      case ACKNOWLEDGED
      case CONNECT_FAILED
      case TIMEOUT
      case FAILED
      case REVERSE_INITIATED
      case REVERSE_INITIATED_ON_AUTH
      case REVERSED
      case REVERSAL_FAILED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum GatewayTxType : Swift.String {
      case AUTH
      case PREAUTH
      case PREAUTHCAPTURE
      case ADJUST
      case VOID
      case VOIDRETURN
      case RETURN
      case REFUND
      case NAKEDREFUND
      case GETBALANCE
      case BATCHCLOSE
      case ACTIVATE
      case BALANCE_LOCK
      case LOAD
      case CASHOUT
      case CASHOUT_ACTIVE_STATUS
      case REDEMPTION
      case REDEMPTION_UNLOCK
      case RELOAD
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments8GiftCard) public class GiftCard : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var track2: Swift.String?
      public var cardNumber: Swift.String?
      public var isManuallyEntered: Swift.Bool?
      public var deviceSerial: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments16GiftCardResponse) public class GiftCardResponse : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var txType: CloverConnector.CLVModels.Payments.TxType?
      public var state: CloverConnector.CLVModels.Payments.GiftCardState?
      public var requestAmount: Swift.Int?
      public var payment: CloverConnector.CLVModels.Payments.Payment?
      public var responseMessage: Swift.String?
      public var requestSuccessful: Swift.Bool?
      public var accountNumber: Swift.String?
      public var giftCardTxUuid: Swift.String?
      public var transactionId: Swift.String?
      public var referenceUuid: Swift.String?
      public var authCode: Swift.String?
      public var begBal: Swift.Int?
      public var endBal: Swift.Int?
      public var holdBal: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum GiftCardState : Swift.String {
      case INVALID
      case ACTIVATED
      case INACTIVE
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments19GiftCardTransaction) public class GiftCardTransaction : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var amount: Swift.Int?
      public var taxAmount: Swift.Int?
      public var orderId: Swift.String?
      public var card: CloverConnector.CLVModels.Payments.GiftCard?
      public var paymentIds: [Swift.String]?
      public var ignorePayment: Swift.Bool?
      public var serviceChargeAmount: CloverConnector.CLVModels.Payments.ServiceChargeAmount?
      public var taxableAmountRates: [CloverConnector.CLVModels.Payments.TaxableAmountRate]?
      public var lineItems: [CloverConnector.CLVModels.Payments.LineItemPayment]?
      public var employeeId: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments7DCCInfo) public class DCCInfo : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var inquiryRateId: Swift.Int?
      public var dccApplied: Swift.Bool?
      public var foreignCurrencyCode: Swift.String?
      public var foreignAmount: Swift.Int?
      public var exchangeRate: Swift.Double?
      public var marginRatePercentage: Swift.String?
      public var exchangeRateSourceName: Swift.String?
      public var exchangeRateSourceTimeStamp: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments10GermanInfo) public class GermanInfo : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var cardTrack2: Swift.String?
      public var cardSequenceNumber: Swift.String?
      public var transactionCaseGermany: Swift.String?
      public var transactionTypeGermany: Swift.String?
      public var terminalID: Swift.String?
      public var traceNumber: Swift.String?
      public var oldTraceNumber: Swift.String?
      public var receiptNumber: Swift.String?
      public var transactionAID: Swift.String?
      public var transactionMSApp: Swift.String?
      public var transactionScriptResults: Swift.String?
      public var receiptType: Swift.String?
      public var customerTransactionDOLValues: Swift.String?
      public var merchantTransactionDOLValues: Swift.String?
      public var merchantJournalDOL: Swift.String?
      public var merchantJournalDOLValues: Swift.String?
      public var configMerchantId: Swift.String?
      public var configProductLabel: Swift.String?
      public var hostResponseAidParBMP53: Swift.String?
      public var hostResponsePrintDataBM60: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments15LineItemPayment) public class LineItemPayment : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var lineItemRef: CloverConnector.CLVModels.Order.LineItem?
      public var paymentRef: CloverConnector.CLVModels.Payments.Payment?
      public var percentage: Swift.Int?
      public var binName: Swift.String?
      public var refunded: Swift.Bool?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc(CloverConnectorModelsExtensionsPaymentsAdditionalCharges) public class AdditionalCharges : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var elements: [CloverConnector.CLVModels.Payments.AdditionalCharge]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init?(coder aDecoder: Foundation.NSCoder)
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc(CloverConnectorModelsExtensionsPaymentsAdditionalCharge) public class AdditionalCharge : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var amount: Swift.Int?
      public var type: CloverConnector.CLVModels.Payments.AdditionalCharge.AdditionalChargeType?
      public var id: Swift.String?
      public var rate: Swift.Int64?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init?(coder aDecoder: Foundation.NSCoder)
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      public enum AdditionalChargeType {
        case interac
        case creditSurcharge
        case convenienceFee
        case interacV2
        case other(Swift.String)
      }
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments7Payment) public class Payment : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var order: CloverConnector.CLVModels.Base.Reference?
      public var device: CloverConnector.CLVModels.Base.Reference?
      public var tender: CloverConnector.CLVModels.Base.Tender?
      public var amount: Swift.Int?
      public var tipAmount: Swift.Int?
      public var taxAmount: Swift.Int?
      public var cashbackAmount: Swift.Int?
      public var cashTendered: Swift.Int?
      public var externalPaymentId: Swift.String?
      public var employee: CloverConnector.CLVModels.Base.Reference?
      public var createdTime: Foundation.Date?
      public var clientCreatedTime: Foundation.Date?
      public var modifiedTime: Foundation.Date?
      public var offline: Swift.Bool?
      public var result: CloverConnector.CLVModels.Payments.Result?
      public var cardTransaction: CloverConnector.CLVModels.Payments.CardTransaction?
      public var serviceCharge: CloverConnector.CLVModels.Payments.ServiceChargeAmount?
      public var taxRates: [CloverConnector.CLVModels.Payments.PaymentTaxRate]?
      public var refunds: [CloverConnector.CLVModels.Payments.Refund]?
      public var note: Swift.String?
      public var lineItemPayments: [CloverConnector.CLVModels.Payments.LineItemPayment]?
      public var voidReason: CloverConnector.CLVModels.Order.VoidReason?
      public var dccInfo: CloverConnector.CLVModels.Payments.DCCInfo?
      public var transactionSettings: CloverConnector.CLVModels.Payments.TransactionSettings?
      public var germanInfo: CloverConnector.CLVModels.Payments.GermanInfo?
      public var appTracking: CloverConnector.CLVModels.Apps.AppTracking?
      public var additionalCharges: CloverConnector.CLVModels.Payments.AdditionalCharges?
      public var transactionInfo: CloverConnector.CLVModels.Payments.TransactionInfo?
      public var increments: [CloverConnector.CLVModels.Payments.IncrementalAuthorization]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments15PaymentResponse) public class PaymentResponse : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var requestSuccessful: Swift.Bool?
      public var responseErrorMessage: Swift.String?
      public var payment: CloverConnector.CLVModels.Payments.Payment?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments14PaymentTaxRate) public class PaymentTaxRate : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var paymentRef: CloverConnector.CLVModels.Payments.Payment?
      public var name: Swift.String?
      public var rate: Swift.Int?
      public var isDefault: Swift.Bool?
      public var taxableAmount: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments6Refund) public class Refund : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var orderRef: CloverConnector.CLVModels.Order.Order?
      public var device: CloverConnector.CLVModels.Device.Device?
      public var amount: Swift.Int?
      public var taxAmount: Swift.Int?
      public var tipAmount: Swift.Int?
      public var createdTime: Foundation.Date?
      public var clientCreatedTime: Foundation.Date?
      public var payment: CloverConnector.CLVModels.Payments.Payment?
      public var employee: CloverConnector.CLVModels.Employees.Employee?
      public var lineItems: [CloverConnector.CLVModels.Order.LineItem]?
      public var overrideMerchantTender: CloverConnector.CLVModels.Base.Tender?
      public var taxableAmountRates: [CloverConnector.CLVModels.Payments.TaxableAmountRate]?
      public var serviceChargeAmount: CloverConnector.CLVModels.Payments.ServiceChargeAmount?
      public var additionalCharges: [CloverConnector.CLVModels.Payments.AdditionalCharge]?
      public var germanInfo: CloverConnector.CLVModels.Payments.GermanInfo?
      public var appTracking: CloverConnector.CLVModels.Apps.AppTracking?
      public var voided: Swift.Bool?
      public var voidReason: Swift.String?
      public var cardTransaction: CloverConnector.CLVModels.Payments.CardTransaction?
      public var transactionInfo: CloverConnector.CLVModels.Payments.TransactionInfo?
      public var merchant: CloverConnector.CLVModels.Base.Reference?
      public var externalReferenceId: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum Result : Swift.String {
      case SUCCESS
      case FAIL
      case INITIATED
      case VOIDED
      case VOIDING
      case AUTH
      case AUTH_COMPLETED
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments16ServerTotalStats) public class ServerTotalStats : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var employeeId: Swift.String?
      public var employeeName: Swift.String?
      public var sales: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var refunds: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var net: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var giftCardLoads: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var giftCardCashOuts: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var tax: CloverConnector.CLVModels.Payments.BatchTotalType?
      public var tips: CloverConnector.CLVModels.Payments.BatchTotalType?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments19ServiceChargeAmount) public class ServiceChargeAmount : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var amount: Swift.Int?
      public var paymentRef: CloverConnector.CLVModels.Payments.Payment?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments17TaxableAmountRate) public class TaxableAmountRate : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var name: Swift.String?
      public var taxableAmount: Swift.Int?
      public var rate: Swift.Int?
      public var isVat: Swift.Bool?
      public var taxAmount: Swift.Int?
      public var transactionRef: CloverConnector.CLVModels.Base.Reference?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments11Transaction) public class Transaction : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var createdTime: Foundation.Date?
      public var clientCreatedTime: Foundation.Date?
      public var payment: CloverConnector.CLVModels.Payments.Payment?
      public var refund: CloverConnector.CLVModels.Payments.Refund?
      public var credit: CloverConnector.CLVModels.Payments.Credit?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum TxType : Swift.String {
      case AUTH
      case PREAUTH
      case PREAUTHCAPTURE
      case ADJUST
      case VOID
      case VOIDRETURN
      case RETURN
      case REFUND
      case NAKEDREFUND
      case GETBALANCE
      case BATCHCLOSE
      case ACTIVATE
      case BALANCE_LOCK
      case LOAD
      case CASHOUT
      case CASHOUT_ACTIVE_STATUS
      case REDEMPTION
      case REDEMPTION_UNLOCK
      case RELOAD
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum TipMode : Swift.String {
      case TIP_PROVIDED
      case ON_SCREEN_BEFORE_PAYMENT
      case ON_SCREEN_AFTER_PAYMENT
      case ON_PAPER
      case NO_TIP
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments19TransactionSettings) public class TransactionSettings : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var cardEntryMethods: Swift.Int?
      public var disableCashBack: Swift.Bool?
      public var cloverShouldHandleReceipts: Swift.Bool?
      public var forcePinEntryOnSwipe: Swift.Bool?
      public var disableRestartTransactionOnFailure: Swift.Bool?
      public var allowOfflinePayment: Swift.Bool?
      public var approveOfflinePaymentWithoutPrompt: Swift.Bool?
      public var signatureThreshold: Swift.Int?
      public var signatureEntryLocation: CloverConnector.CLVModels.Payments.DataEntryLocation?
      public var tipMode: CloverConnector.CLVModels.Payments.TipMode?
      public var tippableAmount: Swift.Int?
      public var tipSuggestions: [CloverConnector.CLVModels.Merchant.TipSuggestion]?
      public var disableReceiptSelection: Swift.Bool?
      public var disableDuplicateCheck: Swift.Bool?
      public var autoAcceptPaymentConfirmations: Swift.Bool?
      public var autoAcceptSignature: Swift.Bool?
      public var forceOfflinePayment: Swift.Bool?
      public var disableCreditSurcharge: Swift.Bool?
      public var regionalExtras: [Swift.String : Swift.String]?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum Type_ : Swift.String {
      case TAB
      case AUTH
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments11VaultedCard) public class VaultedCard : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var first6: Swift.String?
      public var last4: Swift.String?
      public var cardholderName: Swift.String?
      public var expirationDate: Swift.String?
      public var token: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments8CardData) public class CardData : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var track1: Swift.String?
      public var track2: Swift.String?
      public var track3: Swift.String?
      public var encrypted: Swift.Bool?
      public var maskedTrack1: Swift.String?
      public var maskedTrack2: Swift.String?
      public var maskedTrack3: Swift.String?
      public var pan: Swift.String?
      public var cardholderName: Swift.String?
      public var firstName: Swift.String?
      public var lastName: Swift.String?
      public var exp: Swift.String?
      public var last4: Swift.String?
      public var first6: Swift.String?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels8Payments19PendingPaymentEntry) public class PendingPaymentEntry : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var paymentId: Swift.String?
      public var amount: Swift.Int?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc public class TransactionInfo : ObjectiveC.NSObject, ObjectMapper.Mappable {
      public var languageIndicator: Swift.String?
      public var transactionLocale: Swift.String?
      public var accountSelection: CloverConnector.CLVModels.Payments.AccountType?
      public var fiscalInvoiceNumber: Swift.String?
      public var installmentsQuantity: Swift.Int32?
      public var installmentsPlanCode: Swift.String?
      public var installmentsPlanId: Swift.String?
      public var installmentsPlanDesc: Swift.String?
      public var cardTypeLabel: Swift.String?
      public var stan: Swift.Int32?
      public var identityDocument: CloverConnector.CLVModels.Payments.IdentityDocument?
      public var batchNumber: Swift.String?
      public var receiptNumber: Swift.String?
      public var reversalStan: Swift.Int32?
      public var reversalMac: Swift.String?
      public var reversalMacKsn: Swift.String?
      public var terminalIdentification: Swift.String?
      public var merchantIdentifier: Swift.String?
      public var merchantNameLocation: Swift.String?
      public var maskedTrack2: Swift.String?
      public var receiptExtraData: Swift.String?
      public var selectedService: CloverConnector.CLVModels.Payments.SelectedService?
      public var transactionResult: CloverConnector.CLVModels.Payments.TransactionResult?
      public var transactionTags: Swift.String?
      public var txFormat: CloverConnector.CLVModels.Payments.TxFormat?
      public var reversalReason: CloverConnector.CLVModels.Payments.ReversalReason?
      public var panMask: Swift.String?
      public var transactionSequenceCounter: Swift.String?
      public var applicationPanSequenceNumber: Swift.String?
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum AccountType : Swift.String {
      case CREDIT
      case DEBIT
      case CHECKING
      case SAVINGS
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum SelectedService : Swift.UInt8 {
      case none
      case payment
      case refund
      case cancellation
      case preAuth
      case updatePreAuth
      case paymentCompletion
      case cashAdvance
      case deferredPayment
      case deferredPaymentCompletion
      case voiceAuthorization
      case cardholderDetection
      case tokenRequest
      case verification
      public init?(rawValue: Swift.UInt8)
      public typealias RawValue = Swift.UInt8
      public var rawValue: Swift.UInt8 {
        get
      }
    }
    public enum TransactionResult : Swift.UInt8 {
      case approved
      case declined
      case aborted
      case voiceAuthorization
      case paymentPartOnly
      case partiallyApproved
      case none
      public init?(rawValue: Swift.UInt8)
      public typealias RawValue = Swift.UInt8
      public var rawValue: Swift.UInt8 {
        get
      }
    }
    public enum TxFormat : Swift.String {
      case DEFAULT
      case NEXO
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum ReversalReason : Swift.String {
      case CHIP_DECLINE
      case CARDHOLDER_CANCELLATION
      case COMMUNICATION_ERROR
      case OTHER_REASON
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc public class IdentityDocument : ObjectiveC.NSObject, ObjectMapper.Mappable {
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    @objc deinit
  }
}
@objc public class PaymentVoidedMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var voidReason: CloverConnector.VoidReason?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PendingPaymentEntry : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
  public var paymentId: Swift.String?
  public var amount: Swift.Int?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class Point : ObjectMapper.Mappable {
  public var x: Swift.Int?
  public var y: Swift.Int?
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class Points : ObjectMapper.Mappable {
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PreAuthRequest : CloverConnector.BaseTransactionRequest {
  override public var type: CloverConnector.TransactionType {
    get
    set
  }
  override public init(amount: Swift.Int, externalId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PreAuthResponse : CloverConnector.PaymentResponse {
  public init(success: Swift.Bool, result: CloverConnector.ResultCode)
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
extension CloverConnector.CLVModels {
  @_hasMissingDesignatedInitializers public class Printer {
    @_inheritsConvenienceInitializers @objc(_TtCCC15CloverConnector9CLVModels7Printer7Printer) public class Printer : ObjectiveC.NSObject, Foundation.NSCoding, ObjectMapper.Mappable {
      public var id: Swift.String?
      public var mac: Swift.String?
      public var model: Swift.String?
      public var name: Swift.String?
      public var ipAddress: Swift.String?
      public var type_: CloverConnector.CLVModels.Printer.PrinterType?
      @objc public func encode(with aCoder: Foundation.NSCoder)
      @objc required public init(coder aDecoder: Foundation.NSCoder)
      @objc override dynamic public init()
      required public init?(map: ObjectMapper.Map)
      public func mapping(map: ObjectMapper.Map)
      @objc deinit
    }
    public enum PrinterType : Swift.String {
      case NETWORK
      case MY_LOCAL
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PrintJobStatusRequest : ObjectiveC.NSObject {
  public init(_ printRequestId: Swift.String)
  @objc deinit
}
@objc public class PrintJobStatusRequestMessage : CloverConnector.Message {
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PrintJobStatusResponse : CloverConnector.BaseResponse {
  public var printRequestId: Swift.String? {
    get
  }
  public var status: CloverConnector.PrintJobStatus {
    get
  }
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
public enum PrintJobStatus : Swift.String {
  case IN_QUEUE
  case PRINTING
  case DONE
  case ERROR
  case UNKNOWN
  case NOT_FOUND
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class PrintJobStatusResponseMessage : CloverConnector.Message {
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class PrintManualRefundDeclineReceiptMessage : ObjectiveC.NSObject {
  public var credit: CloverConnector.CLVModels.Payments.Credit?
  public var reason: Swift.String?
  public init(credit: CloverConnector.CLVModels.Payments.Credit?, reason: Swift.String?)
  @objc deinit
}
@objc public class PrintManualRefundReceiptMessage : ObjectiveC.NSObject {
  public var credit: CloverConnector.CLVModels.Payments.Credit?
  public init(credit: CloverConnector.CLVModels.Payments.Credit)
  @objc deinit
}
@objc public class PrintPaymentDeclineReceiptMessage : ObjectiveC.NSObject {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var reason: Swift.String?
  public init(payment: CloverConnector.CLVModels.Payments.Payment, reason: Swift.String)
  @objc deinit
}
@objc public class PrintPaymentMerchantCopyReceiptMessage : ObjectiveC.NSObject {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public init(payment: CloverConnector.CLVModels.Payments.Payment)
  @objc deinit
}
@objc public class PrintPaymentReceiptMessage : ObjectiveC.NSObject {
  public var order: CloverConnector.CLVModels.Order.Order?
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public init(payment: CloverConnector.CLVModels.Payments.Payment, order: CloverConnector.CLVModels.Order.Order)
  @objc deinit
}
@objc public class PrintRefundPaymentReceiptMessage : ObjectiveC.NSObject {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var refund: CloverConnector.CLVModels.Payments.Refund?
  public var order: CloverConnector.CLVModels.Order.Order?
  public init(payment: CloverConnector.CLVModels.Payments.Payment, order: CloverConnector.CLVModels.Order.Order, refund: CloverConnector.CLVModels.Payments.Refund)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PrintRequest : ObjectiveC.NSObject {
  public var printRequestId: Swift.String?
  public var printDeviceId: Swift.String?
  public init(image: CloverConnector.ImageClass, printRequestId: Swift.String?, printDeviceId: Swift.String?)
  public init(imageURL: Foundation.URL, printRequestId: Swift.String?, printDeviceId: Swift.String?)
  public init?(text: [Swift.String], printRequestId: Swift.String?, printDeviceId: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ReadCardDataRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var cardEntryMethods: Swift.Int?
  public var forceSwipePinEntry: Swift.Bool
  @objc required override dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ReadCardDataResponse : CloverConnector.BaseResponse {
  public var cardData: CloverConnector.CardData?
  override public init(success: Swift.Bool, result: CloverConnector.ResultCode)
  public init(cardData: CloverConnector.CardData?, code: CloverConnector.ResultStatus, reason: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RefundPaymentPrintMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var refund: CloverConnector.CLVModels.Payments.Refund?
  public var order: CloverConnector.CLVModels.Order.Order?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RefundPaymentRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var amount: Swift.Int?
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var disablePrinting: Swift.Bool
  public var disableReceiptSelection: Swift.Bool
  public var fullRefund: Swift.Bool?
  public init(orderId: Swift.String?, paymentId: Swift.String?, amount: Swift.Int?, fullRefund: Swift.Bool?)
  public init(orderId: Swift.String?, paymentId: Swift.String?, amount: Swift.Int)
  public init(orderId: Swift.String?, paymentId: Swift.String?, fullRefund: Swift.Bool)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RefundPaymentResponse : CloverConnector.BaseResponse {
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var refund: CloverConnector.CLVModels.Payments.Refund?
  public init(success: Swift.Bool, result: CloverConnector.ResultCode, orderId: Swift.String? = nil, paymentId: Swift.String? = nil, refund: CloverConnector.CLVModels.Payments.Refund? = nil, reason: Swift.String? = nil, message: Swift.String? = nil)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RefundRequestMessage : CloverConnector.Message {
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var amount: Swift.Int?
  public var fullRefund: Swift.Bool?
  public var disableCloverPrinting: Swift.Bool
  public var disableReceiptSelection: Swift.Bool
  public init(orderId: Swift.String?, paymentId: Swift.String?, amount: Swift.Int?, fullRefund: Swift.Bool?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RefundResponseMessage : CloverConnector.Message {
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var refund: CloverConnector.CLVModels.Payments.Refund?
  public var reason: CloverConnector.ErrorCode?
  public var message: Swift.String?
  public var code: CloverConnector.TxState?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RegionalExtras {
  public static let FISCAL_INVOICE_NUMBER_KEY: Swift.String
  public static let INSTALLMENT_NUMBER_KEY: Swift.String
  public static let INSTALLMENT_PLAN_KEY: Swift.String
  public static let SKIP_FISCAL_INVOICE_NUMBER_SCREEN_VALUE: Swift.String
  public static let INSTALLMENT_NUMBER_DEFAULT_VALUE: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RegisterForCustomerProvidedDataMessage : CloverConnector.Message {
  public var configurations: [CloverConnector.CLVModels.Loyalty.LoyaltyDataConfig]
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RegisterForCustomerProvidedDataRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var configurations: [CloverConnector.DataProviderConfig]
  public init(configurations: [CloverConnector.DataProviderConfig])
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class RemoteMessage : ObjectMapper.Mappable {
  public var packageName: Swift.String?
  public var id: Swift.String?
  public var payload: Swift.String?
  public var type: CloverConnector.RemoteMessageType?
  public var method: CloverConnector.Method?
  public var version: Swift.Int
  public var remoteSourceSDK: Swift.String
  public var remoteApplicationID: Swift.String
  public var fragmentIndex: Swift.Int?
  public var lastFragment: Swift.Bool?
  public var attachment: Swift.String?
  public var attachmentUri: Swift.String?
  public var attachmentEncoding: Swift.String?
  public var remotePayCompatibilityVersion: Swift.Int
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum RemoteMessageType : Swift.String {
  case COMMAND
  case QUERY
  case EVENT
  case PING
  case PONG
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class RemoveDiscountAction : ObjectMapper.Mappable {
  public var discount: CloverConnector.DisplayDiscount?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class RemoveLineItemAction : ObjectMapper.Mappable {
  public var lineItem: CloverConnector.DisplayLineItem?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ResetDeviceResponse : CloverConnector.BaseResponse {
  public var state: CloverConnector.ExternalDeviceState
  public init(result r: CloverConnector.ResultCode, state s: CloverConnector.ExternalDeviceState)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ResetDeviceResponseMessage : CloverConnector.Message {
  public var result: CloverConnector.ResultStatus
  public var reason: Swift.String?
  public var state: CloverConnector.ExternalDeviceState
  public init(result r: CloverConnector.ResultStatus, reason reas: Swift.String?, state s: CloverConnector.ExternalDeviceState)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum ResultCode : Swift.String {
  case SUCCESS
  case FAIL
  case UNSUPPORTED
  case CANCEL
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResultStatus : Swift.String {
  case SUCCESS
  case FAIL
  case CANCELED
  case CANCEL
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ResultStatusEnum : ObjectMapper.Mappable {
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class RetrieveDeviceStatusRequest {
  public var sendLastMessage: Swift.Bool
  public init(sendLastMessage resend: Swift.Bool = false)
  @objc deinit
}
@objc public class RetrieveDeviceStatusRequestMessage : CloverConnector.Message {
  public var sendLastMessage: Swift.Bool
  public init(_ sendLastMessage: Swift.Bool)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrieveDeviceStatusResponse : CloverConnector.BaseResponse {
  public var state: CloverConnector.ExternalDeviceState
  public var data: CloverConnector.ExternalDeviceStateData?
  public init(success s: Swift.Bool, result r: CloverConnector.ResultCode, state: CloverConnector.ExternalDeviceState, data: CloverConnector.ExternalDeviceStateData?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrieveDeviceStatusResponseMessage : CloverConnector.Message {
  public var result: CloverConnector.ResultStatus
  public var reason: Swift.String
  public var state: CloverConnector.ExternalDeviceState
  public var subState: CloverConnector.ExternalDeviceSubState?
  public var data: CloverConnector.ExternalDeviceStateData?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class RetrievePaymentRequest {
  public var externalPayentId: Swift.String
  public init(_ externalPaymentId: Swift.String)
  @objc deinit
}
@objc public class RetrievePaymentRequestMessage : CloverConnector.Message {
  public var externalPaymentId: Swift.String
  public init(_ externalPaymentId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrievePaymentResponse : CloverConnector.BaseResponse {
  public var queryStatus: CloverConnector.QueryStatus
  public var externalPaymentId: Swift.String?
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public init(success s: Swift.Bool, result r: CloverConnector.ResultCode, queryStatus qs: CloverConnector.QueryStatus, payment p: CloverConnector.CLVModels.Payments.Payment?, externalPaymentId epi: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum QueryStatus : Swift.String {
  case FOUND
  case NOT_FOUND
  case IN_PROGRESS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class RetrievePaymentResponseMessage : CloverConnector.Message {
  public var result: CloverConnector.ResultStatus
  public var reason: Swift.String?
  public var queryStatus: CloverConnector.QueryStatus
  public var externalPaymentId: Swift.String?
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public init(success s: Swift.Bool, result r: CloverConnector.ResultStatus, queryStatus qs: CloverConnector.QueryStatus, externalPaymentId epi: Swift.String?, payment p: CloverConnector.CLVModels.Payments.Payment?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrievePendingPaymentsRequestMessage : CloverConnector.Message {
  public init()
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrievePendingPaymentsResponse : CloverConnector.BaseResponse {
  public var pendingPayments: [CloverConnector.PendingPaymentEntry]?
  public init(code: CloverConnector.ResultCode, message: Swift.String, payments: [CloverConnector.PendingPaymentEntry]?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrievePrintersRequest : ObjectiveC.NSObject {
  public init(printerCategory: CloverConnector.PrintCategory?)
  @objc deinit
}
public enum PrintCategory : Swift.String {
  case order
  case receipt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class RetrievePrintersRequestMessage : CloverConnector.Message {
  public var category: CloverConnector.PrintCategory?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RetrievePrintersResponse : CloverConnector.BaseResponse {
  public var printers: [CloverConnector.CLVModels.Printer.Printer]? {
    get
  }
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class RetrievePrintersResponseMessage : CloverConnector.Message {
  public var printers: [CloverConnector.CLVModels.Printer.Printer]?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SaleRequest : CloverConnector.TransactionRequest {
  public var allowOfflinePayment: Swift.Bool?
  public var approveOfflinePaymentWithoutPrompt: Swift.Bool?
  public var disableCashback: Swift.Bool?
  public var taxAmount: Swift.Int?
  public var tipAmount: Swift.Int?
  public var tipMode: CloverConnector.SaleRequest.TipMode?
  public var tippableAmount: Swift.Int?
  public var forceOfflinePayment: Swift.Bool?
  override public var type: CloverConnector.TransactionType {
    get
    set
  }
  override public init(amount: Swift.Int, externalId: Swift.String)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public enum TipMode : Swift.String {
    case TIP_PROVIDED
    case ON_SCREEN_BEFORE_PAYMENT
    case NO_TIP
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@objc public class SaleResponse : CloverConnector.PaymentResponse {
  public init(success: Swift.Bool, result: CloverConnector.ResultCode)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class SetCustomerInfoRequest {
  public var customerInfo: CloverConnector.CLVModels.Customers.CustomerInfo?
  public init(customerInfo: CloverConnector.CLVModels.Customers.CustomerInfo? = nil)
  @objc deinit
}
@objc public class ShowPaymentReceiptOptionsMessage : CloverConnector.Message {
  public var paymentId: Swift.String?
  public var orderId: Swift.String?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class ShowPaymentReceiptOptionsRequest {
  public init(orderId: Swift.String, paymentId: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ShowReceiptOptionsMessage : CloverConnector.Message {
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var refundId: Swift.String?
  public var creditId: Swift.String?
  public var disableCloverPrinting: Swift.Bool?
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var credit: CloverConnector.CLVModels.Payments.Credit?
  public var refund: CloverConnector.CLVModels.Payments.Refund?
  public var isReprint: Swift.Bool?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ShowReceiptOptionsResponseMessage : CloverConnector.Message {
  public var status: CloverConnector.ResultStatus
  public var reason: Swift.String
  public init(status: CloverConnector.ResultStatus, reason: Swift.String)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ShowThankYouScreenMessage : CloverConnector.Message {
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class ShowWelcomeScreenMessage : CloverConnector.Message {
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class Signature : ObjectMapper.Mappable {
  public var strokes: Swift.Array<CloverConnector.Signature.Stroke>?
  public var width: Swift.Int?
  public var height: Swift.Int?
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public class Stroke : ObjectMapper.Mappable {
    public var points: Swift.Array<CloverConnector.Point>?
    required public init?(map: ObjectMapper.Map)
    public func mapping(map: ObjectMapper.Map)
    @objc deinit
  }
  @objc deinit
}
@objc public class SignatureVerifiedMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var verified: Swift.Bool
  required public init()
  required public init?(map: ObjectMapper.Map)
  public init(payment: CloverConnector.CLVModels.Payments.Payment, verified: Swift.Bool)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TerminalMessage : CloverConnector.Message {
  public var text: Swift.String?
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TextPrintMessage : CloverConnector.Message {
  public var textLines: [Swift.String]?
  public var printRequestId: Swift.String?
  public var printer: CloverConnector.CLVModels.Printer.Printer?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TipAddedMessage : CloverConnector.Message {
  public var tipAmount: Swift.Int?
  required public init?(map: ObjectMapper.Map)
  public init(_ tip: Swift.Int)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TipAdjustAuthRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var tipAmount: Swift.Int
  public var orderId: Swift.String
  public var paymentId: Swift.String
  required public init(orderId: Swift.String, paymentId: Swift.String, tipAmount: Swift.Int)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TipAdjustAuthResponse : CloverConnector.BaseResponse {
  public var tipAmount: Swift.Int? {
    get
  }
  public var paymentId: Swift.String? {
    get
  }
  public var orderId: Swift.String? {
    get
  }
  required public init(success: Swift.Bool, result: CloverConnector.ResultCode, paymentId: Swift.String?, tipAmount: Swift.Int?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TipAdjustMessage : CloverConnector.Message {
  public var paymentId: Swift.String?
  public var orderId: Swift.String?
  public var tipAmount: Swift.Int?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TipAdjustResponseMessage : CloverConnector.Message {
  public var orderId: Swift.String?
  public var paymentId: Swift.String?
  public var amount: Swift.Int?
  public var success: Swift.Bool?
  public var reason: Swift.String?
  public var message: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TransactionRequest : CloverConnector.BaseTransactionRequest {
  public var autoAcceptSignature: Swift.Bool?
  public var signatureThreshold: Swift.Int?
  public var signatureEntryLocation: CloverConnector.CLVModels.Payments.DataEntryLocation?
  public var tipSuggestions: [CloverConnector.CLVModels.Merchant.TipSuggestion]?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  override public init(amount: Swift.Int, externalId: Swift.String)
  @objc deinit
}
public enum TransactionType : Swift.String {
  case AUTH
  case PAYMENT
  case CREDIT
  case DATA
  case CAPTURE_PREAUTH
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class CLVDateTransform : ObjectMapper.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.Double
  public init()
  public func transformFromJSON(_ value: Any?) -> Foundation.Date?
  public func transformToJSON(_ value: Foundation.Date?) -> Swift.Double?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CLVTransforms {
  @_hasMissingDesignatedInitializers public class Customer {
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Loyalty {
    @objc deinit
  }
  @objc deinit
}
@objc public class TxStartRequestMessage : CloverConnector.Message {
  public static let SALE_REQUEST: Swift.String
  public static let AUTH_REQUEST: Swift.String
  public static let PREAUTH_REQUEST: Swift.String
  public static let CREDIT_REQUEST: Swift.String
  public static let REFUND_REQUEST: Swift.String
  public var payIntent: CloverConnector.PayIntent?
  public var order: CloverConnector.CLVModels.Order.Order?
  public var suppressOnScreenTips: Swift.Bool?
  public var requestInfo: Swift.String?
  required public init?(map: ObjectMapper.Map)
  required public init()
  required convenience public init(payIntent: CloverConnector.PayIntent, order: CloverConnector.CLVModels.Order.Order, suppressOnScreenTips: Swift.Bool?, requestInfo ri: Swift.String?)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class TxStartResponseMessage : CloverConnector.Message {
  public var order: CloverConnector.CLVModels.Order.Order?
  public var result: CloverConnector.TxStartResponseResult?
  public var externalPaymentId: Swift.String?
  public var requestInfo: Swift.String?
  public var reason: Swift.String?
  public var message: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum TxStartResponseResult : Swift.String {
  case SUCCESS
  case ORDER_MODIFIED
  case ORDER_LOAD
  case FAIL
  case DUPLICATE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TxState : Swift.String {
  case START
  case SUCCESS
  case FAIL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class TxStateMessage : CloverConnector.Message {
  public var txState: CloverConnector.TxState?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum UiState : Swift.String {
  case START
  case FAILED
  case FATAL
  case TRY_AGAIN
  case INPUT_ERROR
  case PIN_BYPASS_CONFIRM
  case CANCELED
  case TIMED_OUT
  case DECLINED
  case VOIDED
  case CONFIGURING
  case PROCESSING
  case REMOVE_CARD
  case PROCESSING_GO_ONLINE
  case PROCESSING_CREDIT
  case PROCESSING_SWIPE
  case SELECT_APPLICATION
  case PIN_PAD
  case MANUAL_CARD_NUMBER
  case MANUAL_CARD_CVV
  case MANUAL_CARD_CVV_UNREADABLE
  case MANUAL_CARD_EXPIRATION
  case SELECT_ACCOUNT
  case CASHBACK_CONFIRM
  case CASHBACK_SELECT
  case CONTACTLESS_TAP_REQUIRED
  case VOICE_REFERRAL_RESULT
  case CONFIRM_PARTIAL_AUTH
  case PACKET_EXCEPTION
  case CONFIRM_DUPLICATE_CHECK
  case FORCE_ACCEPTANCE
  case VERIFY_SIGNATURE_ON_PAPER
  case VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID
  case VERIFY_SIGNATURE_ON_SCREEN
  case VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID
  case ADD_SIGNATURE
  case SIGNATURE_ON_SCREEN_FALLBACK
  case RETURN_TO_MERCHANT
  case SIGNATURE_REJECT
  case ADD_SIGNATURE_CANCEL_CONFIRM
  case CONFIRM_AMOUNT
  case SENSORY_EXPERIENCE
  case ADD_TIP
  case RECEIPT_OPTIONS
  case HANDLE_TENDER
  case SELECT_LANGUAGE
  case APPROVED
  case OFFLINE_PAYMENT_CONFIRM
  case CUSTOM_ACTIVITY
  case STARTING_CUSTOM_ACTIVITY
  public enum UiDirection : Swift.String {
    case ENTER
    case EXIT
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class UiStateMessage : CloverConnector.Message {
  public var uiState: CloverConnector.UiState?
  public var uiText: Swift.String?
  public var uiDirection: CloverConnector.UiState.UiDirection?
  public var inputOptions: [CloverConnector.InputOption]?
  public init(uiState: CloverConnector.UiState?, uiText: Swift.String?, uiDirection: CloverConnector.UiState.UiDirection?, inputOptions: [CloverConnector.InputOption])
  required public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VaultCardMessage : CloverConnector.Message {
  public var cardEntryMethods: Swift.Int?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VaultCardRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var cardEntryMethods: Swift.Int?
  @objc required override dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VaultCardResponse : CloverConnector.BaseResponse {
  public var card: CloverConnector.CLVModels.Payments.VaultedCard?
  override public init(success: Swift.Bool, result: CloverConnector.ResultCode)
  public init(card: CloverConnector.CLVModels.Payments.VaultedCard?, code: CloverConnector.ResultStatus, reason: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VaultCardResponseMessage : CloverConnector.Message {
  public var card: CloverConnector.CLVModels.Payments.VaultedCard?
  public var status: CloverConnector.ResultStatus?
  public var reason: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VerifySignatureRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var signature: CloverConnector.Signature?
  @objc override required dynamic public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class VoidCreditRequest : ObjectMapper.Mappable {
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class VoidCreditResponse : ObjectMapper.Mappable {
  required public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VoidPaymentMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var voidReason: CloverConnector.VoidReason?
  public var disableCloverPrinting: Swift.Bool?
  public var disableReceiptSelection: Swift.Bool?
  public init()
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VoidPaymentRefundRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  required public init(refundId: Swift.String, employeeId: Swift.String?, orderId: Swift.String?, disablePrinting: Swift.Bool?, disableReceiptSelection: Swift.Bool?)
  public func mapping(map: ObjectMapper.Map)
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VoidPaymentRefundResponse : CloverConnector.BaseResponse {
  public var refundId: Swift.String
  public init(success: Swift.Bool, result: CloverConnector.ResultCode, refundId: Swift.String, reason: Swift.String?, message: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VoidPaymentRequest : ObjectiveC.NSObject, ObjectMapper.Mappable {
  public var disablePrinting: Swift.Bool
  public var disableReceiptSelection: Swift.Bool
  required public init(orderId: Swift.String, paymentId: Swift.String, voidReason: CloverConnector.VoidReason)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VoidPaymentResponse : CloverConnector.PaymentResponse {
  public var paymentId: Swift.String?
  public var transactionNumber: Swift.String?
  public var voidReason: CloverConnector.VoidReason?
  public init(success: Swift.Bool, result: CloverConnector.ResultCode, paymentId: Swift.String?, transactionNumber: Swift.String?)
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public class VoidPaymentResponseMessage : CloverConnector.Message {
  public var payment: CloverConnector.CLVModels.Payments.Payment?
  public var voidReason: CloverConnector.VoidReason?
  public var success: Swift.Bool?
  public var status: CloverConnector.ResultStatus?
  public var reason: Swift.String?
  public var message: Swift.String?
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public enum VoidReason : Swift.String {
  case USER_CANCEL
  case TRANSPORT_ERROR
  case REJECT_SIGNATURE
  case REJECT_PARTIAL_AUTH
  case NOT_APPROVED
  case FAILED
  case AUTH_CLOSED_NEW_CARD
  case DEVELOPER_PAY_PARTIAL_AUTH
  case REJECT_DUPLICATE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Starscream.WebSocket {
  public func connect(_ timeoutInSec: Swift.Int)
}
@objc public class WebSocketDeviceConfiguration : ObjectiveC.NSObject, CloverConnector.CloverDeviceConfiguration {
  public var remoteApplicationID: Swift.String
  public var posName: Swift.String
  public var posSerialNumber: Swift.String
  public var pairingAuthToken: Swift.String?
  public var disableSSLValidation: Swift.Bool
  public var pingFrequency: Swift.Int?
  public var pongTimeout: Swift.Int?
  public var reconnectTimer: Swift.Int?
  public var reportConnectionProblemTimeout: Swift.Int?
  public var maxCharInMessage: Swift.Int
  public var remoteSourceSDK: Swift.String {
    get
  }
  @objc deinit
  public init(endpoint: Swift.String, remoteApplicationID: Swift.String, posName: Swift.String, posSerial: Swift.String, pairingAuthToken: Swift.String?, pairingDeviceConfiguration: any CloverConnector.PairingDeviceConfiguration)
  public func getTransport() -> CloverConnector.CloverTransport?
  public func getCloverDeviceTypeName() -> Swift.String
  public func getMessagePackageName() -> Swift.String
  public func getName() -> Swift.String
  public func getMaxMessageCharacters() -> Swift.Int
}
extension CloverConnector.CLVModels.Account.AuthFactorType : Swift.Equatable {}
extension CloverConnector.CLVModels.Account.AuthFactorType : Swift.Hashable {}
extension CloverConnector.CLVModels.Account.AuthFactorType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Apps.BusinessTypeGroupCode : Swift.Equatable {}
extension CloverConnector.CLVModels.Apps.BusinessTypeGroupCode : Swift.Hashable {}
extension CloverConnector.CLVModels.Apps.BusinessTypeGroupCode : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Apps.MerchantBillingStatus : Swift.Equatable {}
extension CloverConnector.CLVModels.Apps.MerchantBillingStatus : Swift.Hashable {}
extension CloverConnector.CLVModels.Apps.MerchantBillingStatus : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Apps.OAuthResponseType : Swift.Equatable {}
extension CloverConnector.CLVModels.Apps.OAuthResponseType : Swift.Hashable {}
extension CloverConnector.CLVModels.Apps.OAuthResponseType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Apps.ProductType : Swift.Equatable {}
extension CloverConnector.CLVModels.Apps.ProductType : Swift.Hashable {}
extension CloverConnector.CLVModels.Apps.ProductType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Apps.ScanStatus : Swift.Equatable {}
extension CloverConnector.CLVModels.Apps.ScanStatus : Swift.Hashable {}
extension CloverConnector.CLVModels.Apps.ScanStatus : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Base.ApprovalStatus : Swift.Equatable {}
extension CloverConnector.CLVModels.Base.ApprovalStatus : Swift.Hashable {}
extension CloverConnector.CLVModels.Base.ApprovalStatus : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Base.BusinessTypeCode : Swift.Equatable {}
extension CloverConnector.CLVModels.Base.BusinessTypeCode : Swift.Hashable {}
extension CloverConnector.CLVModels.Base.BusinessTypeCode : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Cash.Type_ : Swift.Equatable {}
extension CloverConnector.CLVModels.Cash.Type_ : Swift.Hashable {}
extension CloverConnector.CLVModels.Cash.Type_ : Swift.RawRepresentable {}
extension CloverConnector.ChallengeType : Swift.Equatable {}
extension CloverConnector.ChallengeType : Swift.Hashable {}
extension CloverConnector.ChallengeType : Swift.RawRepresentable {}
extension CloverConnector.CloverDeviceErrorType : Swift.Equatable {}
extension CloverConnector.CloverDeviceErrorType : Swift.Hashable {}
extension CloverConnector.CloverDeviceErrorType : Swift.RawRepresentable {}
extension CloverConnector.CloverDeviceEvent.DeviceEventState : Swift.Equatable {}
extension CloverConnector.CloverDeviceEvent.DeviceEventState : Swift.Hashable {}
extension CloverConnector.CloverDeviceEvent.DeviceEventState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Developer.DeveloperBillingStatus : Swift.Equatable {}
extension CloverConnector.CLVModels.Developer.DeveloperBillingStatus : Swift.Hashable {}
extension CloverConnector.CLVModels.Developer.DeveloperBillingStatus : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Device.BuildType : Swift.Equatable {}
extension CloverConnector.CLVModels.Device.BuildType : Swift.Hashable {}
extension CloverConnector.CLVModels.Device.BuildType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Device.DeviceProvisionState : Swift.Equatable {}
extension CloverConnector.CLVModels.Device.DeviceProvisionState : Swift.Hashable {}
extension CloverConnector.CLVModels.Device.DeviceProvisionState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Device.RomBuildType : Swift.Equatable {}
extension CloverConnector.CLVModels.Device.RomBuildType : Swift.Hashable {}
extension CloverConnector.CLVModels.Device.RomBuildType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Employees.AccountRole : Swift.Equatable {}
extension CloverConnector.CLVModels.Employees.AccountRole : Swift.Hashable {}
extension CloverConnector.CLVModels.Employees.AccountRole : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Employees.Permission : Swift.Equatable {}
extension CloverConnector.CLVModels.Employees.Permission : Swift.Hashable {}
extension CloverConnector.CLVModels.Employees.Permission : Swift.RawRepresentable {}
extension CloverConnector.ErrorCode : Swift.Equatable {}
extension CloverConnector.ErrorCode : Swift.Hashable {}
extension CloverConnector.ErrorCode : Swift.RawRepresentable {}
extension CloverConnector.ExternalDeviceState : Swift.Equatable {}
extension CloverConnector.ExternalDeviceState : Swift.Hashable {}
extension CloverConnector.ExternalDeviceState : Swift.RawRepresentable {}
extension CloverConnector.ExternalDeviceSubState : Swift.Equatable {}
extension CloverConnector.ExternalDeviceSubState : Swift.Hashable {}
extension CloverConnector.ExternalDeviceSubState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Hours.ReferenceType : Swift.Equatable {}
extension CloverConnector.CLVModels.Hours.ReferenceType : Swift.Hashable {}
extension CloverConnector.CLVModels.Hours.ReferenceType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Inventory.PriceType : Swift.Equatable {}
extension CloverConnector.CLVModels.Inventory.PriceType : Swift.Hashable {}
extension CloverConnector.CLVModels.Inventory.PriceType : Swift.RawRepresentable {}
extension CloverConnector.KeyPress : Swift.Equatable {}
extension CloverConnector.KeyPress : Swift.Hashable {}
extension CloverConnector.KeyPress : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Loyalty.VasProtocol : Swift.Equatable {}
extension CloverConnector.CLVModels.Loyalty.VasProtocol : Swift.Hashable {}
extension CloverConnector.CLVModels.Loyalty.VasProtocol : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Loyalty.VasDataTypeType : Swift.Equatable {}
extension CloverConnector.CLVModels.Loyalty.VasDataTypeType : Swift.Hashable {}
extension CloverConnector.CLVModels.Loyalty.VasDataTypeType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Merchant.LogoType : Swift.Equatable {}
extension CloverConnector.CLVModels.Merchant.LogoType : Swift.Hashable {}
extension CloverConnector.CLVModels.Merchant.LogoType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Merchant.OrderTitle : Swift.Equatable {}
extension CloverConnector.CLVModels.Merchant.OrderTitle : Swift.Hashable {}
extension CloverConnector.CLVModels.Merchant.OrderTitle : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Merchant.SyncLevel : Swift.Equatable {}
extension CloverConnector.CLVModels.Merchant.SyncLevel : Swift.Hashable {}
extension CloverConnector.CLVModels.Merchant.SyncLevel : Swift.RawRepresentable {}
extension CloverConnector.Method : Swift.Equatable {}
extension CloverConnector.Method : Swift.Hashable {}
extension CloverConnector.Method : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Order.CustomerIdMethod : Swift.Equatable {}
extension CloverConnector.CLVModels.Order.CustomerIdMethod : Swift.Hashable {}
extension CloverConnector.CLVModels.Order.CustomerIdMethod : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Order.HoursAvailable : Swift.Equatable {}
extension CloverConnector.CLVModels.Order.HoursAvailable : Swift.Hashable {}
extension CloverConnector.CLVModels.Order.HoursAvailable : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Order.PayType : Swift.Equatable {}
extension CloverConnector.CLVModels.Order.PayType : Swift.Hashable {}
extension CloverConnector.CLVModels.Order.PayType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Order.VoidReason : Swift.Equatable {}
extension CloverConnector.CLVModels.Order.VoidReason : Swift.Hashable {}
extension CloverConnector.CLVModels.Order.VoidReason : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.AVSResult : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.AVSResult : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.AVSResult : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.BatchState : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.BatchState : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.BatchState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.BatchType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.BatchType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.BatchType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.CardEntryType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.CardEntryType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.CardEntryType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.CardTransactionState : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.CardTransactionState : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.CardTransactionState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.CardTransactionType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.CardTransactionType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.CardTransactionType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.CardType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.CardType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.CardType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.Currency : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.Currency : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.Currency : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.CvmResult : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.CvmResult : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.CvmResult : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.CVVResult : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.CVVResult : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.CVVResult : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.DataEntryLocation : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.DataEntryLocation : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.DataEntryLocation : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.GatewayTxState : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.GatewayTxState : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.GatewayTxState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.GatewayTxType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.GatewayTxType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.GatewayTxType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.GiftCardState : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.GiftCardState : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.GiftCardState : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.Result : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.Result : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.Result : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.TxType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.TxType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.TxType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.TipMode : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.TipMode : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.TipMode : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.Type_ : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.Type_ : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.Type_ : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.AccountType : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.AccountType : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.AccountType : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.SelectedService : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.SelectedService : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.SelectedService : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.TransactionResult : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.TransactionResult : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.TransactionResult : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.TxFormat : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.TxFormat : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.TxFormat : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Payments.ReversalReason : Swift.Equatable {}
extension CloverConnector.CLVModels.Payments.ReversalReason : Swift.Hashable {}
extension CloverConnector.CLVModels.Payments.ReversalReason : Swift.RawRepresentable {}
extension CloverConnector.CLVModels.Printer.PrinterType : Swift.Equatable {}
extension CloverConnector.CLVModels.Printer.PrinterType : Swift.Hashable {}
extension CloverConnector.CLVModels.Printer.PrinterType : Swift.RawRepresentable {}
extension CloverConnector.PrintJobStatus : Swift.Equatable {}
extension CloverConnector.PrintJobStatus : Swift.Hashable {}
extension CloverConnector.PrintJobStatus : Swift.RawRepresentable {}
extension CloverConnector.RemoteMessageType : Swift.Equatable {}
extension CloverConnector.RemoteMessageType : Swift.Hashable {}
extension CloverConnector.RemoteMessageType : Swift.RawRepresentable {}
extension CloverConnector.ResultCode : Swift.Equatable {}
extension CloverConnector.ResultCode : Swift.Hashable {}
extension CloverConnector.ResultCode : Swift.RawRepresentable {}
extension CloverConnector.ResultStatus : Swift.Equatable {}
extension CloverConnector.ResultStatus : Swift.Hashable {}
extension CloverConnector.ResultStatus : Swift.RawRepresentable {}
extension CloverConnector.QueryStatus : Swift.Equatable {}
extension CloverConnector.QueryStatus : Swift.Hashable {}
extension CloverConnector.QueryStatus : Swift.RawRepresentable {}
extension CloverConnector.PrintCategory : Swift.Equatable {}
extension CloverConnector.PrintCategory : Swift.Hashable {}
extension CloverConnector.PrintCategory : Swift.RawRepresentable {}
extension CloverConnector.SaleRequest.TipMode : Swift.Equatable {}
extension CloverConnector.SaleRequest.TipMode : Swift.Hashable {}
extension CloverConnector.SaleRequest.TipMode : Swift.RawRepresentable {}
extension CloverConnector.TransactionType : Swift.Equatable {}
extension CloverConnector.TransactionType : Swift.Hashable {}
extension CloverConnector.TransactionType : Swift.RawRepresentable {}
extension CloverConnector.TxStartResponseResult : Swift.Equatable {}
extension CloverConnector.TxStartResponseResult : Swift.Hashable {}
extension CloverConnector.TxStartResponseResult : Swift.RawRepresentable {}
extension CloverConnector.TxState : Swift.Equatable {}
extension CloverConnector.TxState : Swift.Hashable {}
extension CloverConnector.TxState : Swift.RawRepresentable {}
extension CloverConnector.UiState : Swift.Equatable {}
extension CloverConnector.UiState : Swift.Hashable {}
extension CloverConnector.UiState : Swift.RawRepresentable {}
extension CloverConnector.UiState.UiDirection : Swift.Equatable {}
extension CloverConnector.UiState.UiDirection : Swift.Hashable {}
extension CloverConnector.UiState.UiDirection : Swift.RawRepresentable {}
extension CloverConnector.VoidReason : Swift.Equatable {}
extension CloverConnector.VoidReason : Swift.Hashable {}
extension CloverConnector.VoidReason : Swift.RawRepresentable {}
